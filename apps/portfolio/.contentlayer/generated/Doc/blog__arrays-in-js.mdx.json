{
  "title": "Javascriptda Arraylar",
  "description": "Arraylar har doim ham tushunishga oson emas, ayniqsa siz Javascript dasturchisi bo'lsangiz. Endi javascriptda arraylar qanday ishlashini anglab yetish vaqti keldi",
  "published": true,
  "categories": "Javascript",
  "body": {
    "raw": "\n[](https://medium.com/@khaitbekdev?source=post_page-----2ccb74810244--------------------------------)\n\n[Hayitbek Yusupov](https://medium.com/@khaitbekdev?source=post_page-----2ccb74810244--------------------------------)\n\n5 min read\n\nOct 14, 2022\n\n_Arraylar dasturlash olamida ko’pchilik birinchi ko’rishda qiyin deb o’ylaydigan, ammo aslida unchalik ham qiyin bo’lmagan mavzulardan biri hisoblanadi. Bugun biz arraylarni osonroq yo’l bilan o’rganishga harakat qilamiz._\n\nSiz katta ehtimol bilan o’zgaruvchilar bilan tanishsiz. O’zgaruvchilar o’zida qandaydir qiymatni saqlaydi. Arraylar ham o’zgaruvchi, faqat ular o’zida bir nechta qiymatlar (o’zgaruvchilar) saqlash mumkin. Arrayni bir quti desak, uning ichida bir qancha narsalar bo’lishi mumkin. Masalan hammamiz bozorda tuxum olganmiz, to’g’rimi? Lekin hech tuxumlar joylangan idishga yaxshilab e’tibor berganmisiz? Mana shu holat arraylarga yaxshi misol bo’la oladi. Qandaydir quti yoki konteyner, uning ichida esa bir qancha narsalar bor. Pastdagi rasmda biz 12 ta tuxum joylashgan qutini ko’rishimiz mumkin. Arraylar ham o’zida qiymatlarni deyarli shunday saqlaydi.\n\n![](https://miro.medium.com/v2/resize:fit:504/0*DuFgfEGe019v8ViX.jpeg)\n\nArraylar o’zida turli xil qiymatlar— son, matn va hokazolarni saqlashi mumkin. Tepadagi rasmda ko’rib turganingizdek arraydagi elementlarga indeks orqali murojaat qilinadi. Ya’ni arraydagi elementlarni arraydagi joylashuvi bo’ladi. Arraydagi birinchi elementning indeksi doim 0 bo’ladi. Bu deyarli barcha dasturlash tillarida bir xil. Biz arraydagi eng birinchi elementni ekranga chiqarishimiz uchun arrayning 0-elementiga murojaat qilishimiz kerak.\n\n```\nlet array = [‘🥚’, ‘📱’ ,’🍈’ ,’🍉’ ,’🍎’ ,’🍋’]\nconsole.log(array[0]) // 🥚\nlet array = ['🥚', '📱' ,'🍈' ,'🍉' ,'🍎' ,'🍋']\nconsole.log(array[4]) // 🍎\n```\n\nKo’rib turganingizdek arrayning 4-indeksdagi elementini ekranga chiqarganimizda arraydagi 5-element ekranga chiqdi. Bunga sabab esa arrayda tartib 0 raqamidan boshlanadi. Elementlarning joylashuvi indeks bo’yicha, indekslar esa 0 raqamidan boshlanadi.\n\n![](https://miro.medium.com/v2/resize:fit:875/0*HNVmQQNpLNUJDmNS.jpg)\n\nTepadagi rasmga bir e’tibor beraylik. Value — qiymat, index — indeks, lower bound — arrayning boshi, upper bound — arrayning oxiri, array length — arraydagi elementlar soni esa 9 ta.\n\n# Arraydagi ma’lumotlar xotirada qanday saqlanadi?\n\nBiz qandaydir arrayni e’lon qilganimizda, kompyuter o’sha arrayda nechta element borligiga qarab, array uchun xotiradan joy ajratadi, dangalroq tushuntirganda xotiradan kataklar ajratadi. Masalan bizda `raqamlar = [1,2,3,4,5]` array bor. Keling bu array xotirada qanday saqlanishini rasm misolida ko’rishga harakat qilamiz.\n\n![](https://miro.medium.com/v2/resize:fit:300/0*24a8AX0Vh7afJFKs)\n\nKo’rib turganingizdek, arrayda 5 ta element bor, indekslar, qiymatlar bor, ammo bizga eng qiziq joyi **Base Address** degan joyi. U yerda **1000, 1002, 1004, 1006, 1008** sonlari bor. U sonlar nima? U sonlar o’sha arraydagi qiymatning xotirada saqlangan manzili. Ya’ni arraydagi birinchi qiymat **10** soni uning xotirada saqlangan manzili esa **1000**. O’zi aslida xotiradagi manzillar `0x7ffe5367e044` shu ko’rinishda bo’ladi, lekin biz uchun oddiy sonlar bilan tushunish osonroq. Xulosa qilib aytish mumkinki, biz kompyuterga array ochmoqchiligimizni aytamiz, keyin esa u arrayni ichiga qiymatlar beramiz. Kompyuter esa nechta qiymat borligiga qarab xotiradan array uchun joy ajratib beradi.\n\n# Ichma-ich array\n\n![](https://miro.medium.com/v2/resize:fit:875/0*QiZItmbEOiDAT1Uf.png)\n\nIchma-ich arraylarni nima ekanligini yaxshi tushunish uchun biz shaxmat doskasiga qaraymiz. Shaxmat doskasida 8 ta qator, 8ta ustun, umumiy 64 ta katak bor. Bu degani har bir qatorda 8 tadan ustun bor degani. Qator nima ustun nima? Qator deganda biz 1, 2, 3, 4, 5, 6, 7, 8, 9 raqamlarini tushunsak bo’ladi, ustun deganda esa o’sha raqamlarni o’ng tarafidagi 8 ta kataklarni tushunsak bo’ladi. Bu nima degani o’zi? Keling shu shaxmat doskasini array deb tasavvur qilaylik.\n\n```\nlet shaxmat_doskasi = [\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H']\n]\n```\n\nKo’rib turganingizdek , bizda `shaxmat_doskasi` nomli array bor, uni ichida esa 8 ta array bor. Bu degani bizda katta quti bor, qutini ichida esa yana 8ta mayda qutilar bor, u mayda qutilarni ichida esa 8 tadan elementlar (kataklar) bor. Endi biz boshida ko’rdikki, arraydagi elementlarga indeks orqali murojaat qila olamiz. Keling endi bu arrayning birinchi elementini ekranga chiqarib ko’ramiz. Bizga aynan birinchi element kelyaptimi yo’qmi bilish uchun arrayni biroz o’zgartiramiz.\n\n```\nlet shaxmat_doskasi = [\n    ['A','B','C','D','E','F','G','H','1'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H']\n]console.log(shaxmat_doskasi[0])\n// [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', '1']\n```\n\nBiz `shaxmat_doskasi` nomli arrayning 0-indeksidagi elementini ekranga chiqarmoqchi bo’lsak, `[ ‘A’, ‘B’, ‘C’, ‘D’, ‘E’, ‘F’, ‘G’, ‘H’, ‘1’]` shu array ekranga chiqdi. Ya’ni `shaxmat_doskasi` dagi birinchi elementning o’zi bitta array. Endi keling `shaxmat_doskasi` nomli arrayimizdagi aynan bitta katakni ekranga chiqarib ko’ramiz. Shaxmat doskasiga e’tibor beramiz. Biz A1 katakni ekranga chiqarishimiz kerak. Buni esa quyidagicha amalga oshirishimiz mumkin.\n\n```\nlet shaxmat_doskasi = [\n    ['A1','B1','C1','D1','E1','F1','G1','H1'],\n    ['A2','B2','C2','D2','E2','F2','G2','H2'],\n    ['A3','B3','C3','D3','E3','F3','G3','H3'],\n    ['A4','B4','C4','D4','E4','F4','G4','H4'],\n    ['A5','B5','C5','D5','E5','F5','G5','H5'],\n    ['A6','B6','C6','D6','E6','F6','G6','H6'],\n    ['A7','B7','C7','D7','E7','F7','G7','H7'],\n    ['A8','B8','C8','D8','E8','F8','G8','H8']\n]\nconsole.log(shaxmat_doskasi[0][0])\n// A1\n```\n\nBizga bu koddan yangilik bo’lgan joyi `shaxmat_doskasi[0][0]` shu joyi. Birinchi 0 `shaxmat_doskasi` dagi birinchi element. Birinchi elementni o’zini ichida 8 ta element bor, demak ikkinchi 0 o’sha birinchi elementni ichidagi birinchi element. Yodimizdan ko’tarmaylik, indeks 0 dan boshlanadi. 0-element degani bu arraydagi birinchi element degani.\n\n# Arraylar bilan bajariladigan amallar\n\nBiz array ni shunchaki e’lon qilishni ko’rdik, xolos. Ammo, arrayga yangi element qo’shish, yoki elementni o’chirib tashlashni ko’rmadik. Keling hozir biz Javascriptda array bilan bajariladigan 4 ta amallarni ko’ramiz: arrayning oxiriga yangi element qo’shish, arrayning boshiga yangi element qo’shish, arrayning oxiridan bitta elementni o’chirish, arrayning boshidan bitta element o’chirish.\n\n**Arrayning oxiriga yangi element qo’shish**\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.push(6)\nconsole.log(raqamlar)// [ 1, 2, 3, 4, 5, 6 ]\n```\n\nArrayning `push` nomli metodi (funksiyasi) bor. Bu metod o’ziga element(yoki elementlar) qabul qiladi. Qiladigan ishi esa arrayning oxiriga yangi element (yoki elementlari) qo’shadi. Tepadagi kodda bizda `[1,2,3,4,5]` array bor edi. Biz esa `array.push(6)` orqali arrayga 6 sonini qo’shdik. Keyin esa arrayni ekranga chiqardik va ekranga `[1,2,3,4,5,6]` chiqdi. Ya’ni biz arrayning oxiriga 6 raqamini qo’shdik.\n\nPastdagi kodda esa biz arrayning oxiriga bir nechta elementlarni qo’shdik. Bir necha elementlar vergul bilan ajratib yoziladi.\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.push(6,\"John\",\"Doe\")\nconsole.log(raqamlar) // [ 1, 2, 3, 4, 5, 6, 'John', 'Doe' ]\n```\n\n**Arrayning oxiridan 1ta elementni o’chirib tashlash**\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.pop()\nconsole.log(raqamlar) // [ 1, 2, 3, 4 ]\n```\n\nArraydagi navbatdagi metod esa `pop` hisoblanadi. Bu metod o’ziga hech qanday raqam qabul qilmaydi, `push` metodi esa o’ziga son (yoki sonlar) qabul qiladi. `pop` metodi hech narsa qabul qilmaydi va shunchaki arrayning eng oxirgi elementini o’chirib yuboradi.\n\n**Arrayning boshidan bitta elementni o’chirish**\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.shift()\nconsole.log(raqamlar) // [ 2, 3, 4, 5 ]\n```\n\nKo’rib turganimizdek, arrayda `shift` nomli metod bor. Bu metod ham hech qanday qiymat qabul qilmaydi, shunchaki arrayning boshidan bitta elementni o’chirib yuboradi.\n\n**Arrayning boshiga element qo’shish**\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.unshift(6)\nconsole.log(raqamlar) // [ 6, 1, 2, 3, 4, 5 ]\n```\n\nKo’rib turganimizdek, `unshift` metodi o’ziga element(yoki elementlar) qabul qiladi va qabul qilingan element (yoki elementlar) ni arrayning boshiga qo’shib qo’yadi.\n\n```\nlet array = [1,2,3,4,5] // arrayning boshiga bir nechta elementlar qo'shish// bir nechta elementlar qo'shish uchun vergul bilan ajratib yoziladi\narray.unshift(6,\"Eshmat\",\"Toshmat\")\nconsole.log(array) // [ 6, 'Eshmat', 'Toshmat', 1, 2, 3, 4, 5 ]\n```\n\nArrayda boshqa metodlar ham bor, ammo biz ular haqida bugun gaplashmaymiz. Bizning maqsadimiz shunchaki yaxshi tushuncha hosil qilib olish. Arrayning boshqa metodlari haqida alohida maqola chiqarishga harakat qilaman.\n\n# Arraylarning dasturlash olamidagi o’rni\n\nArraylar dasturlash olamida shunchalik muhimki, har doim ishlatilinib keladi, Junior ham, middle ham, senior ham arraylarni ishlatadi. Arraylarsiz yozilgan kodni tasavvur qilish imkonsiz. Har qanday loyihada eng ko’p ishlatilinadigani bu array. Arraylar bizga juda ko’p qulayliklarni beradi. Shu sababdan ham deyarli barcha dasturlash tillarida arraylar bor, lekin ular har xil nomlanishi mumkin. Masalan Javascriptda arraylar bor, C++ dasturlash tilida esa arraylarni **massiv** deyiladi, Python dasturlash tilida esa **List** deyiladi.\n",
    "code": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var u=(n,a)=>()=>(a||n((a={exports:{}}).exports,a),a.exports),k=(n,a)=>{for(var r in a)l(n,r,{get:a[r],enumerable:!0})},o=(n,a,r,d)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let e of g(a))!b.call(n,e)&&e!==r&&l(n,e,{get:()=>a[e],enumerable:!(d=c(a,e))||d.enumerable});return n};var q=(n,a,r)=>(r=n!=null?m(y(n)):{},o(a||!n||!n.__esModule?l(r,\"default\",{value:n,enumerable:!0}):r,n)),p=n=>o(l({},\"__esModule\",{value:!0}),n);var s=u((E,h)=>{h.exports=_jsx_runtime});var B={};k(B,{default:()=>A,frontmatter:()=>z});var i=q(s()),z={title:\"Javascriptda Arraylar\",description:\"Arraylar har doim ham tushunishga oson emas, ayniqsa siz Javascript dasturchisi bo'lsangiz. Endi javascriptda arraylar qanday ishlashini anglab yetish vaqti keldi\",categories:\"Javascript\"};function t(n){let a=Object.assign({p:\"p\",a:\"a\",em:\"em\",img:\"img\",pre:\"pre\",code:\"code\",h1:\"h1\",span:\"span\",strong:\"strong\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----2ccb74810244--------------------------------\"})}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----2ccb74810244--------------------------------\",children:\"Hayitbek Yusupov\"})}),`\n`,(0,i.jsx)(a.p,{children:\"5 min read\"}),`\n`,(0,i.jsx)(a.p,{children:\"Oct 14, 2022\"}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.em,{children:\"Arraylar dasturlash olamida ko\\u2019pchilik birinchi ko\\u2019rishda qiyin deb o\\u2019ylaydigan, ammo aslida unchalik ham qiyin bo\\u2019lmagan mavzulardan biri hisoblanadi. Bugun biz arraylarni osonroq yo\\u2019l bilan o\\u2019rganishga harakat qilamiz.\"})}),`\n`,(0,i.jsx)(a.p,{children:\"Siz katta ehtimol bilan o\\u2019zgaruvchilar bilan tanishsiz. O\\u2019zgaruvchilar o\\u2019zida qandaydir qiymatni saqlaydi. Arraylar ham o\\u2019zgaruvchi, faqat ular o\\u2019zida bir nechta qiymatlar (o\\u2019zgaruvchilar) saqlash mumkin. Arrayni bir quti desak, uning ichida bir qancha narsalar bo\\u2019lishi mumkin. Masalan hammamiz bozorda tuxum olganmiz, to\\u2019g\\u2019rimi? Lekin hech tuxumlar joylangan idishga yaxshilab e\\u2019tibor berganmisiz? Mana shu holat arraylarga yaxshi misol bo\\u2019la oladi. Qandaydir quti yoki konteyner, uning ichida esa bir qancha narsalar bor. Pastdagi rasmda biz 12 ta tuxum joylashgan qutini ko\\u2019rishimiz mumkin. Arraylar ham o\\u2019zida qiymatlarni deyarli shunday saqlaydi.\"}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{src:\"https://miro.medium.com/v2/resize:fit:504/0*DuFgfEGe019v8ViX.jpeg\",alt:\"\"})}),`\n`,(0,i.jsx)(a.p,{children:\"Arraylar o\\u2019zida turli xil qiymatlar\\u2014 son, matn va hokazolarni saqlashi mumkin. Tepadagi rasmda ko\\u2019rib turganingizdek arraydagi elementlarga indeks orqali murojaat qilinadi. Ya\\u2019ni arraydagi elementlarni arraydagi joylashuvi bo\\u2019ladi. Arraydagi birinchi elementning indeksi doim 0 bo\\u2019ladi. Bu deyarli barcha dasturlash tillarida bir xil. Biz arraydagi eng birinchi elementni ekranga chiqarishimiz uchun arrayning 0-elementiga murojaat qilishimiz kerak.\"}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let array = [\\u2018\\u{1F95A}\\u2019, \\u2018\\u{1F4F1}\\u2019 ,\\u2019\\u{1F348}\\u2019 ,\\u2019\\u{1F349}\\u2019 ,\\u2019\\u{1F34E}\\u2019 ,\\u2019\\u{1F34B}\\u2019]\nconsole.log(array[0]) // \\u{1F95A}\nlet array = ['\\u{1F95A}', '\\u{1F4F1}' ,'\\u{1F348}' ,'\\u{1F349}' ,'\\u{1F34E}' ,'\\u{1F34B}']\nconsole.log(array[4]) // \\u{1F34E}\n`})}),`\n`,(0,i.jsx)(a.p,{children:\"Ko\\u2019rib turganingizdek arrayning 4-indeksdagi elementini ekranga chiqarganimizda arraydagi 5-element ekranga chiqdi. Bunga sabab esa arrayda tartib 0 raqamidan boshlanadi. Elementlarning joylashuvi indeks bo\\u2019yicha, indekslar esa 0 raqamidan boshlanadi.\"}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{src:\"https://miro.medium.com/v2/resize:fit:875/0*HNVmQQNpLNUJDmNS.jpg\",alt:\"\"})}),`\n`,(0,i.jsx)(a.p,{children:\"Tepadagi rasmga bir e\\u2019tibor beraylik. Value \\u2014 qiymat, index \\u2014 indeks, lower bound \\u2014 arrayning boshi, upper bound \\u2014 arrayning oxiri, array length \\u2014 arraydagi elementlar soni esa 9 ta.\"}),`\n`,(0,i.jsxs)(a.h1,{id:\"arraydagi-malumotlar-xotirada-qanday-saqlanadi\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#arraydagi-malumotlar-xotirada-qanday-saqlanadi\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Arraydagi ma\\u2019lumotlar xotirada qanday saqlanadi?\"]}),`\n`,(0,i.jsxs)(a.p,{children:[\"Biz qandaydir arrayni e\\u2019lon qilganimizda, kompyuter o\\u2019sha arrayda nechta element borligiga qarab, array uchun xotiradan joy ajratadi, dangalroq tushuntirganda xotiradan kataklar ajratadi. Masalan bizda \",(0,i.jsx)(a.code,{children:\"raqamlar = [1,2,3,4,5]\"}),\" array bor. Keling bu array xotirada qanday saqlanishini rasm misolida ko\\u2019rishga harakat qilamiz.\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{src:\"https://miro.medium.com/v2/resize:fit:300/0*24a8AX0Vh7afJFKs\",alt:\"\"})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Ko\\u2019rib turganingizdek, arrayda 5 ta element bor, indekslar, qiymatlar bor, ammo bizga eng qiziq joyi \",(0,i.jsx)(a.strong,{children:\"Base Address\"}),\" degan joyi. U yerda \",(0,i.jsx)(a.strong,{children:\"1000, 1002, 1004, 1006, 1008\"}),\" sonlari bor. U sonlar nima? U sonlar o\\u2019sha arraydagi qiymatning xotirada saqlangan manzili. Ya\\u2019ni arraydagi birinchi qiymat \",(0,i.jsx)(a.strong,{children:\"10\"}),\" soni uning xotirada saqlangan manzili esa \",(0,i.jsx)(a.strong,{children:\"1000\"}),\". O\\u2019zi aslida xotiradagi manzillar \",(0,i.jsx)(a.code,{children:\"0x7ffe5367e044\"}),\" shu ko\\u2019rinishda bo\\u2019ladi, lekin biz uchun oddiy sonlar bilan tushunish osonroq. Xulosa qilib aytish mumkinki, biz kompyuterga array ochmoqchiligimizni aytamiz, keyin esa u arrayni ichiga qiymatlar beramiz. Kompyuter esa nechta qiymat borligiga qarab xotiradan array uchun joy ajratib beradi.\"]}),`\n`,(0,i.jsxs)(a.h1,{id:\"ichma-ich-array\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ichma-ich-array\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Ichma-ich array\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{src:\"https://miro.medium.com/v2/resize:fit:875/0*QiZItmbEOiDAT1Uf.png\",alt:\"\"})}),`\n`,(0,i.jsx)(a.p,{children:\"Ichma-ich arraylarni nima ekanligini yaxshi tushunish uchun biz shaxmat doskasiga qaraymiz. Shaxmat doskasida 8 ta qator, 8ta ustun, umumiy 64 ta katak bor. Bu degani har bir qatorda 8 tadan ustun bor degani. Qator nima ustun nima? Qator deganda biz 1, 2, 3, 4, 5, 6, 7, 8, 9 raqamlarini tushunsak bo\\u2019ladi, ustun deganda esa o\\u2019sha raqamlarni o\\u2019ng tarafidagi 8 ta kataklarni tushunsak bo\\u2019ladi. Bu nima degani o\\u2019zi? Keling shu shaxmat doskasini array deb tasavvur qilaylik.\"}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let shaxmat_doskasi = [\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H']\n]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Ko\\u2019rib turganingizdek , bizda \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" nomli array bor, uni ichida esa 8 ta array bor. Bu degani bizda katta quti bor, qutini ichida esa yana 8ta mayda qutilar bor, u mayda qutilarni ichida esa 8 tadan elementlar (kataklar) bor. Endi biz boshida ko\\u2019rdikki, arraydagi elementlarga indeks orqali murojaat qila olamiz. Keling endi bu arrayning birinchi elementini ekranga chiqarib ko\\u2019ramiz. Bizga aynan birinchi element kelyaptimi yo\\u2019qmi bilish uchun arrayni biroz o\\u2019zgartiramiz.\"]}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let shaxmat_doskasi = [\n    ['A','B','C','D','E','F','G','H','1'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H']\n]console.log(shaxmat_doskasi[0])\n// [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', '1']\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Biz \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" nomli arrayning 0-indeksidagi elementini ekranga chiqarmoqchi bo\\u2019lsak, \",(0,i.jsx)(a.code,{children:\"[ \\u2018A\\u2019, \\u2018B\\u2019, \\u2018C\\u2019, \\u2018D\\u2019, \\u2018E\\u2019, \\u2018F\\u2019, \\u2018G\\u2019, \\u2018H\\u2019, \\u20181\\u2019]\"}),\" shu array ekranga chiqdi. Ya\\u2019ni \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" dagi birinchi elementning o\\u2019zi bitta array. Endi keling \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" nomli arrayimizdagi aynan bitta katakni ekranga chiqarib ko\\u2019ramiz. Shaxmat doskasiga e\\u2019tibor beramiz. Biz A1 katakni ekranga chiqarishimiz kerak. Buni esa quyidagicha amalga oshirishimiz mumkin.\"]}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let shaxmat_doskasi = [\n    ['A1','B1','C1','D1','E1','F1','G1','H1'],\n    ['A2','B2','C2','D2','E2','F2','G2','H2'],\n    ['A3','B3','C3','D3','E3','F3','G3','H3'],\n    ['A4','B4','C4','D4','E4','F4','G4','H4'],\n    ['A5','B5','C5','D5','E5','F5','G5','H5'],\n    ['A6','B6','C6','D6','E6','F6','G6','H6'],\n    ['A7','B7','C7','D7','E7','F7','G7','H7'],\n    ['A8','B8','C8','D8','E8','F8','G8','H8']\n]\nconsole.log(shaxmat_doskasi[0][0])\n// A1\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Bizga bu koddan yangilik bo\\u2019lgan joyi \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi[0][0]\"}),\" shu joyi. Birinchi 0 \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" dagi birinchi element. Birinchi elementni o\\u2019zini ichida 8 ta element bor, demak ikkinchi 0 o\\u2019sha birinchi elementni ichidagi birinchi element. Yodimizdan ko\\u2019tarmaylik, indeks 0 dan boshlanadi. 0-element degani bu arraydagi birinchi element degani.\"]}),`\n`,(0,i.jsxs)(a.h1,{id:\"arraylar-bilan-bajariladigan-amallar\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#arraylar-bilan-bajariladigan-amallar\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Arraylar bilan bajariladigan amallar\"]}),`\n`,(0,i.jsx)(a.p,{children:\"Biz array ni shunchaki e\\u2019lon qilishni ko\\u2019rdik, xolos. Ammo, arrayga yangi element qo\\u2019shish, yoki elementni o\\u2019chirib tashlashni ko\\u2019rmadik. Keling hozir biz Javascriptda array bilan bajariladigan 4 ta amallarni ko\\u2019ramiz: arrayning oxiriga yangi element qo\\u2019shish, arrayning boshiga yangi element qo\\u2019shish, arrayning oxiridan bitta elementni o\\u2019chirish, arrayning boshidan bitta element o\\u2019chirish.\"}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:\"Arrayning oxiriga yangi element qo\\u2019shish\"})}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.push(6)\nconsole.log(raqamlar)// [ 1, 2, 3, 4, 5, 6 ]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Arrayning \",(0,i.jsx)(a.code,{children:\"push\"}),\" nomli metodi (funksiyasi) bor. Bu metod o\\u2019ziga element(yoki elementlar) qabul qiladi. Qiladigan ishi esa arrayning oxiriga yangi element (yoki elementlari) qo\\u2019shadi. Tepadagi kodda bizda \",(0,i.jsx)(a.code,{children:\"[1,2,3,4,5]\"}),\" array bor edi. Biz esa \",(0,i.jsx)(a.code,{children:\"array.push(6)\"}),\" orqali arrayga 6 sonini qo\\u2019shdik. Keyin esa arrayni ekranga chiqardik va ekranga \",(0,i.jsx)(a.code,{children:\"[1,2,3,4,5,6]\"}),\" chiqdi. Ya\\u2019ni biz arrayning oxiriga 6 raqamini qo\\u2019shdik.\"]}),`\n`,(0,i.jsx)(a.p,{children:\"Pastdagi kodda esa biz arrayning oxiriga bir nechta elementlarni qo\\u2019shdik. Bir necha elementlar vergul bilan ajratib yoziladi.\"}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.push(6,\"John\",\"Doe\")\nconsole.log(raqamlar) // [ 1, 2, 3, 4, 5, 6, 'John', 'Doe' ]\n`})}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:\"Arrayning oxiridan 1ta elementni o\\u2019chirib tashlash\"})}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.pop()\nconsole.log(raqamlar) // [ 1, 2, 3, 4 ]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Arraydagi navbatdagi metod esa \",(0,i.jsx)(a.code,{children:\"pop\"}),\" hisoblanadi. Bu metod o\\u2019ziga hech qanday raqam qabul qilmaydi, \",(0,i.jsx)(a.code,{children:\"push\"}),\" metodi esa o\\u2019ziga son (yoki sonlar) qabul qiladi. \",(0,i.jsx)(a.code,{children:\"pop\"}),\" metodi hech narsa qabul qilmaydi va shunchaki arrayning eng oxirgi elementini o\\u2019chirib yuboradi.\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:\"Arrayning boshidan bitta elementni o\\u2019chirish\"})}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.shift()\nconsole.log(raqamlar) // [ 2, 3, 4, 5 ]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Ko\\u2019rib turganimizdek, arrayda \",(0,i.jsx)(a.code,{children:\"shift\"}),\" nomli metod bor. Bu metod ham hech qanday qiymat qabul qilmaydi, shunchaki arrayning boshidan bitta elementni o\\u2019chirib yuboradi.\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:\"Arrayning boshiga element qo\\u2019shish\"})}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.unshift(6)\nconsole.log(raqamlar) // [ 6, 1, 2, 3, 4, 5 ]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Ko\\u2019rib turganimizdek, \",(0,i.jsx)(a.code,{children:\"unshift\"}),\" metodi o\\u2019ziga element(yoki elementlar) qabul qiladi va qabul qilingan element (yoki elementlar) ni arrayning boshiga qo\\u2019shib qo\\u2019yadi.\"]}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let array = [1,2,3,4,5] // arrayning boshiga bir nechta elementlar qo'shish// bir nechta elementlar qo'shish uchun vergul bilan ajratib yoziladi\narray.unshift(6,\"Eshmat\",\"Toshmat\")\nconsole.log(array) // [ 6, 'Eshmat', 'Toshmat', 1, 2, 3, 4, 5 ]\n`})}),`\n`,(0,i.jsx)(a.p,{children:\"Arrayda boshqa metodlar ham bor, ammo biz ular haqida bugun gaplashmaymiz. Bizning maqsadimiz shunchaki yaxshi tushuncha hosil qilib olish. Arrayning boshqa metodlari haqida alohida maqola chiqarishga harakat qilaman.\"}),`\n`,(0,i.jsxs)(a.h1,{id:\"arraylarning-dasturlash-olamidagi-orni\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#arraylarning-dasturlash-olamidagi-orni\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Arraylarning dasturlash olamidagi o\\u2019rni\"]}),`\n`,(0,i.jsxs)(a.p,{children:[\"Arraylar dasturlash olamida shunchalik muhimki, har doim ishlatilinib keladi, Junior ham, middle ham, senior ham arraylarni ishlatadi. Arraylarsiz yozilgan kodni tasavvur qilish imkonsiz. Har qanday loyihada eng ko\\u2019p ishlatilinadigani bu array. Arraylar bizga juda ko\\u2019p qulayliklarni beradi. Shu sababdan ham deyarli barcha dasturlash tillarida arraylar bor, lekin ular har xil nomlanishi mumkin. Masalan Javascriptda arraylar bor, C++ dasturlash tilida esa arraylarni \",(0,i.jsx)(a.strong,{children:\"massiv\"}),\" deyiladi, Python dasturlash tilida esa \",(0,i.jsx)(a.strong,{children:\"List\"}),\" deyiladi.\"]})]})}function x(n={}){let{wrapper:a}=n.components||{};return a?(0,i.jsx)(a,Object.assign({},n,{children:(0,i.jsx)(t,n)})):t(n)}var A=x;return p(B);})();\n;return Component;"
  },
  "_id": "blog/arrays-in-js.mdx",
  "_raw": {
    "sourceFilePath": "blog/arrays-in-js.mdx",
    "sourceFileName": "arrays-in-js.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/arrays-in-js"
  },
  "type": "Doc",
  "slug": "/blog/arrays-in-js",
  "slugAsParams": "arrays-in-js"
}