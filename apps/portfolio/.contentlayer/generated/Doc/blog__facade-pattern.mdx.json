{
  "title": "Facade pattern",
  "description": "Dasturlash olamida patternlar tushunchasi ancha muhim. Bulardan biri esa Facade pattern",
  "published": true,
  "categories": "Javascript",
  "body": {
    "raw": "\n# Facade pattern\n\n[](https://medium.com/@khaitbekdev?source=post_page-----d01332673915--------------------------------)\n\n[Hayitbek Yusupov](https://medium.com/@khaitbekdev?source=post_page-----d01332673915--------------------------------)\n\n4 min read\n\nNov 26, 2022\n\nBugungi postda ko’pchilik (asosan boshlang’ich) dasturchilar funksiyalarni ishlatishda yo’l qo’yadigan xatolardan birini ko’rib chiqamiz. Bu xato funksiyani faqat bir holatga to’g’irlashdir. Ya’ni funksiya aynan bir holatga ishlaydi, lekin keyinchalik dasturga o’zgartirishlar kiritilganda funksiyani qaytadan yozib chiqish kerak. Bugun esa qanday qilib funksiyalarimizni **facade pattern** orqali **moslashuvchan** qilishni ko’rib chiqamiz.\n\n# API bilan ishlash\n\nHozir esa javascriptda qandaydir API dan ma’lumot olishda deyarli barcha yozishi ehtimoli katta bo’lgan kodni tahlil qilamiz. Bu kod 2ta API dan ma’lumotni olib keladi va console ga chiqaradi.\n\n```\nfunction getPosts(){\n    fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\").then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n}\n\nfunction getTodos(){\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n}\n\ngetPosts();\ngetTodos();\n```\n\n**Katta ehtimol bilan barchangizga tanish kod :-)**\n\nKo’rinishidan bu kod yaxshi, alohida funksiyaga olingan, refactoring qilingan. Lekin kodni funksiyani ichiga olib qo’yish bilangina ish bitmaydi. Bu kodda muammolar bor. Keling bu muammoni ko’rish uchun kodni biroz ko’paytiramiz.\n\n```\nfunction getPosts(){\n    fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\").then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n}\n\nfunction getTodos(){\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\nfunction getPhotos(){\n    fetch('https://jsonplaceholder.typicode.com/photos')\n    .then(response => response.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\nfunction getUsers(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => console.log(users))\n    .catch(err => console.log(err));\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n```\n\nBu gal endi biz 4 xil API dan ma’lumot olyapmiz. Lekin baribir kodga qarasangiz muammolarni ko’rasiz. Siz balkim **async/await** ishlatish orqali muammoga yechim topsa bo’lar deb o’ylayotgandursiz. Mayli, keling endi .then() va .catch() lar o’rniga **try/catch** va **async/await** ni ishlatib ko’ramiz.\n\n```\nasync function getPosts() {\n    try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\");\n        const posts = await response.json();\n        console.log(posts);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getTodos() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n        const todos = await response.json();\n        console.log(todos);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getPhotos() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/photos');\n        const photos = await response.json();\n        console.log(photos);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getUsers() {\n    try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n        const users = await response.json();\n        console.log(users);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n```\n\nBiz endi funksiyalarimizda **async/await** va **try catch** ishlatdik. Lekin bu ham muammoni hal qilmaydi. Chunki kodga qarasangiz bir xil kod takror takror kelgan. Bir xil kod qayta qayta kelishi esa albatta yaxshi emas. Biz endi bu muammoni hal qilish uchun **facade** patterndan foydalanamiz.\n\n# Facade pattern\n\nKeling endi bir funksiya yaratamiz. Bu funksiya biz takror-takror yozgan kodni bitta qilib beradi.\n\n```\nasync function getFetch(url) {\n    try {\n        const res = await fetch(`${url}`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\n```\n\nKo’rib turganingizdek bizda funksiya o’ziga **url** degan argument oladi. Keyin esa o’sha **url** ga so’rov yuboradi va kelgan ma’lumotni return qiladi. Biror xatolik yuz bersa, console ga chiqaradi. Endi funksiyalardagi barcha **fetch** ishlatilingan joylarni o’zgartirib chiqamiz. **fetch()** ning o’rniga o’zimizning **getFetch()** funksiyasini ishlatamiz.\n\n```\nasync function getFetch(url) {\n    try {\n        const res = await fetch(`${url}`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\");\n        console.log(posts);\n}\n\nasync function getTodos() {\n        const todos = await getFetch('https://jsonplaceholder.typicode.com/todos/1');\n        console.log(todos);\n}\n\nasync function getPhotos() {\n    const photos = await getFetch(\"https://jsonplaceholder.typicode.com/photos\");\n    console.log(photos);\n}\n\n\nasync function getUsers() {\n    const users = await getFetch(\"https://jsonplaceholder.typicode.com/users\");\n    console.log(users);\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n```\n\nKodimiz qancha **qisqarganiga** bir qara **Karl!** Shuncha qatorlik kodni bitta oddiy funksiyada yozish orqali kodni ancha kamaytirdik. Lekin bu hammasi emas. Keling endi yanayam chuqurroq kirishamiz. Biz API dan qandaydir ma’lumotni **GET** qilmoqchi bo’lsak API linkni oxiriga parametrlar berib o’tirishimiz kerak. Masalan `posts?userId=1` va hokazo. Buni qo’lda yozib o’tirish biroz muammoroq. Keling endi shu muammochani ham hal qilamiz. Biz barcha parametrlarni **getFetch()** funksiyamizga **object** ko’rinishida berib yuboramiz va **getFetch()** funksiyada shu parametrlar bilan ishlaymiz.\n\n```\nasync function getFetch(url,params = {}) {\n    const queryString = Object.entries(params).map(param => {\n        return `${param[0]}=${param[1]}`;\n    }).join(\"&\");\n    try {\n        const res = await fetch(`${url}?${queryString}`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n        });\n        console.log(posts);\n}\n\n```\n\nFunksiyamiz o’ziga **params** nomli objectni oladi. U object esa quyidagi ko’rinishda bo’ladi `{userId:1}` . Lekin biz parametrni **sql command** sifatida berib yuborishimiz kerak. Shuning uchun ham **queryString** degan o’zgaruvchiga har bitta parametrni ichidagi property _(key:value)_ larni **sql commandga** o’giradi. Masalan funksiyaning **params** argumentiga `{userId:1, userName:”john”,userAge:18}` qiymatini bersak, bizga `userId=1&userName=John&userAge=18` ko’rinishidagi **sql command** hosil bo’ladi. Keyin shu queryString nomli stringni **fetch** qilayotganimizda **url** ni yoniga qo’shib qo’yamiz.\n\n```\nconst posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n});\n```\n\nBu holatda getFetch() funksiyasida bizning url quyidagi ko'rinishni oladi -> https://jsonplaceholder.typicode.com/posts?userId=1\n\nKo’rganimizdek, facade pattern orqali kodimizni ancha tozaladik va qisqartirdik. Endi facade pattern orqali **getFetch()** funksiyada **fetch()** dan emas axios kutubxonasidan foydalanamiz. Axios ni ishlatganimizda funksiyamiz deyarli o’zgarmaydi. **Axios** ni ishlatish uchun **CDN** orqali ulab olsangiz yetadi. **Axios** bilan ishlaganimizda **getFetch()** funksiyasi o’zgaradi, lekin o’zgarishi juda ham oson bo’ladi.\n\n```\nasync function getFetch(link,params = {}) {\n    return axios({\n        url:link,\n        method:\"GET\",\n        params:params\n    }).then(res => res.data).catch(err => console.log(\"Xatolik\",err));\n}\n```\n\nKo’rganingizdek, unchalik ham ko’p o’zgarish yo’q. O’qishga juda ham sodda. Endi ushbu funksiyamizni qolgan joylarda ishlata olamiz.\n\n```\n\nasync function getFetch(url,params = {}) {\n    return axios({\n        url:url,\n        method:\"GET\",\n        params:params\n    }).then(res => res.data).catch(err => console.log(\"Xatolik\",err));\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n        });\n        console.log(posts);\n}\n\nasync function getTodos() {\n        const todos = await getFetch('https://jsonplaceholder.typicode.com/todos/1');\n        console.log(todos);\n}\n\nasync function getPhotos() {\n    const photos = await getFetch(\"https://jsonplaceholder.typicode.com/photos\");\n    console.log(photos);\n}\n\n\nasync function getUsers() {\n    const users = await getFetch(\"https://jsonplaceholder.typicode.com/users\");\n    console.log(users);\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n```\n\nKo’rganingizdek, **facade pattern** orqali yozgan kodimiz eng boshidagi koddan ancha saviyaliroq. O’qishga ham tushunishga ham va eng asosiysi o’zgartirishga ham oson. Haqiqiy **flexible (moslashuvchan) funksiya.** Agar biz axios ishlatganimizdayu facade pattern ni ishlatmasak, har bir joyda fetch ning o’rniga axios yozib chiqishimiz kerak. Eng boshidagi kodga qayting. O’sha kodda fetchni o’rniga axios ishlatish kerak bo’lib qolganda tamom edi. Har bitta fetch ishlatilgan joyni axios ga o’zgartirish kerak edi. Lekin biz bittagina funksiyani ichida o’zgartirdik. Lekin dasturimiz ishlashdan to’xtamadi.\n\n# Xulosa\n\nFacade pattern ning maqsadi ishlatishga noqulay bo’lgan **API** ni ishlatish qulay bo’lgan **API** ga aylantirishdir. Bir marta yaxshilab qulay qilib funksiya yozib olasiz va uni ishlataverasiz. Mabodo axios ishlatishingiz kerak bo’lib qolsa kodingizni faqat bir joyda o’zgartirasiz. Xato qilish ehtimolingiz kamroq bo’ladi.\n",
    "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),k=(i,n)=>{for(var o in n)s(i,o,{get:n[o],enumerable:!0})},r=(i,n,o,t)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let e of p(n))!m.call(i,e)&&e!==o&&s(i,e,{get:()=>n[e],enumerable:!(t=g(n,e))||t.enumerable});return i};var b=(i,n,o)=>(o=i!=null?d(u(i)):{},r(n||!i||!i.__esModule?s(o,\"default\",{value:i,enumerable:!0}):o,i)),f=i=>r(s({},\"__esModule\",{value:!0}),i);var l=y((w,c)=>{c.exports=_jsx_runtime});var x={};k(x,{default:()=>j,frontmatter:()=>z});var a=b(l()),z={title:\"Facade pattern\",description:\"Dasturlash olamida patternlar tushunchasi ancha muhim. Bulardan biri esa Facade pattern\",categories:\"Javascript\"};function h(i){let n=Object.assign({h1:\"h1\",a:\"a\",span:\"span\",p:\"p\",strong:\"strong\",pre:\"pre\",code:\"code\",em:\"em\"},i.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:\"facade-pattern\",children:[(0,a.jsx)(n.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#facade-pattern\",children:(0,a.jsx)(n.span,{className:\"icon icon-link\"})}),\"Facade pattern\"]}),`\n`,(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----d01332673915--------------------------------\"})}),`\n`,(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----d01332673915--------------------------------\",children:\"Hayitbek Yusupov\"})}),`\n`,(0,a.jsx)(n.p,{children:\"4 min read\"}),`\n`,(0,a.jsx)(n.p,{children:\"Nov 26, 2022\"}),`\n`,(0,a.jsxs)(n.p,{children:[\"Bugungi postda ko\\u2019pchilik (asosan boshlang\\u2019ich) dasturchilar funksiyalarni ishlatishda yo\\u2019l qo\\u2019yadigan xatolardan birini ko\\u2019rib chiqamiz. Bu xato funksiyani faqat bir holatga to\\u2019g\\u2019irlashdir. Ya\\u2019ni funksiya aynan bir holatga ishlaydi, lekin keyinchalik dasturga o\\u2019zgartirishlar kiritilganda funksiyani qaytadan yozib chiqish kerak. Bugun esa qanday qilib funksiyalarimizni \",(0,a.jsx)(n.strong,{children:\"facade pattern\"}),\" orqali \",(0,a.jsx)(n.strong,{children:\"moslashuvchan\"}),\" qilishni ko\\u2019rib chiqamiz.\"]}),`\n`,(0,a.jsxs)(n.h1,{id:\"api-bilan-ishlash\",children:[(0,a.jsx)(n.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#api-bilan-ishlash\",children:(0,a.jsx)(n.span,{className:\"icon icon-link\"})}),\"API bilan ishlash\"]}),`\n`,(0,a.jsx)(n.p,{children:\"Hozir esa javascriptda qandaydir API dan ma\\u2019lumot olishda deyarli barcha yozishi ehtimoli katta bo\\u2019lgan kodni tahlil qilamiz. Bu kod 2ta API dan ma\\u2019lumotni olib keladi va console ga chiqaradi.\"}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`function getPosts(){\n    fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\").then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n}\n\nfunction getTodos(){\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n}\n\ngetPosts();\ngetTodos();\n`})}),`\n`,(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:\"Katta ehtimol bilan barchangizga tanish kod :-)\"})}),`\n`,(0,a.jsx)(n.p,{children:\"Ko\\u2019rinishidan bu kod yaxshi, alohida funksiyaga olingan, refactoring qilingan. Lekin kodni funksiyani ichiga olib qo\\u2019yish bilangina ish bitmaydi. Bu kodda muammolar bor. Keling bu muammoni ko\\u2019rish uchun kodni biroz ko\\u2019paytiramiz.\"}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`function getPosts(){\n    fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\").then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n}\n\nfunction getTodos(){\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\nfunction getPhotos(){\n    fetch('https://jsonplaceholder.typicode.com/photos')\n    .then(response => response.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\nfunction getUsers(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => console.log(users))\n    .catch(err => console.log(err));\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Bu gal endi biz 4 xil API dan ma\\u2019lumot olyapmiz. Lekin baribir kodga qarasangiz muammolarni ko\\u2019rasiz. Siz balkim \",(0,a.jsx)(n.strong,{children:\"async/await\"}),\" ishlatish orqali muammoga yechim topsa bo\\u2019lar deb o\\u2019ylayotgandursiz. Mayli, keling endi .then() va .catch() lar o\\u2019rniga \",(0,a.jsx)(n.strong,{children:\"try/catch\"}),\" va \",(0,a.jsx)(n.strong,{children:\"async/await\"}),\" ni ishlatib ko\\u2019ramiz.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getPosts() {\n    try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\");\n        const posts = await response.json();\n        console.log(posts);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getTodos() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n        const todos = await response.json();\n        console.log(todos);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getPhotos() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/photos');\n        const photos = await response.json();\n        console.log(photos);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getUsers() {\n    try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n        const users = await response.json();\n        console.log(users);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Biz endi funksiyalarimizda \",(0,a.jsx)(n.strong,{children:\"async/await\"}),\" va \",(0,a.jsx)(n.strong,{children:\"try catch\"}),\" ishlatdik. Lekin bu ham muammoni hal qilmaydi. Chunki kodga qarasangiz bir xil kod takror takror kelgan. Bir xil kod qayta qayta kelishi esa albatta yaxshi emas. Biz endi bu muammoni hal qilish uchun \",(0,a.jsx)(n.strong,{children:\"facade\"}),\" patterndan foydalanamiz.\"]}),`\n`,(0,a.jsxs)(n.h1,{id:\"facade-pattern-1\",children:[(0,a.jsx)(n.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#facade-pattern-1\",children:(0,a.jsx)(n.span,{className:\"icon icon-link\"})}),\"Facade pattern\"]}),`\n`,(0,a.jsx)(n.p,{children:\"Keling endi bir funksiya yaratamiz. Bu funksiya biz takror-takror yozgan kodni bitta qilib beradi.\"}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getFetch(url) {\n    try {\n        const res = await fetch(\\`\\${url}\\`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Ko\\u2019rib turganingizdek bizda funksiya o\\u2019ziga \",(0,a.jsx)(n.strong,{children:\"url\"}),\" degan argument oladi. Keyin esa o\\u2019sha \",(0,a.jsx)(n.strong,{children:\"url\"}),\" ga so\\u2019rov yuboradi va kelgan ma\\u2019lumotni return qiladi. Biror xatolik yuz bersa, console ga chiqaradi. Endi funksiyalardagi barcha \",(0,a.jsx)(n.strong,{children:\"fetch\"}),\" ishlatilingan joylarni o\\u2019zgartirib chiqamiz. \",(0,a.jsx)(n.strong,{children:\"fetch()\"}),\" ning o\\u2019rniga o\\u2019zimizning \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyasini ishlatamiz.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getFetch(url) {\n    try {\n        const res = await fetch(\\`\\${url}\\`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\");\n        console.log(posts);\n}\n\nasync function getTodos() {\n        const todos = await getFetch('https://jsonplaceholder.typicode.com/todos/1');\n        console.log(todos);\n}\n\nasync function getPhotos() {\n    const photos = await getFetch(\"https://jsonplaceholder.typicode.com/photos\");\n    console.log(photos);\n}\n\n\nasync function getUsers() {\n    const users = await getFetch(\"https://jsonplaceholder.typicode.com/users\");\n    console.log(users);\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Kodimiz qancha \",(0,a.jsx)(n.strong,{children:\"qisqarganiga\"}),\" bir qara \",(0,a.jsx)(n.strong,{children:\"Karl!\"}),\" Shuncha qatorlik kodni bitta oddiy funksiyada yozish orqali kodni ancha kamaytirdik. Lekin bu hammasi emas. Keling endi yanayam chuqurroq kirishamiz. Biz API dan qandaydir ma\\u2019lumotni \",(0,a.jsx)(n.strong,{children:\"GET\"}),\" qilmoqchi bo\\u2019lsak API linkni oxiriga parametrlar berib o\\u2019tirishimiz kerak. Masalan \",(0,a.jsx)(n.code,{children:\"posts?userId=1\"}),\" va hokazo. Buni qo\\u2019lda yozib o\\u2019tirish biroz muammoroq. Keling endi shu muammochani ham hal qilamiz. Biz barcha parametrlarni \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyamizga \",(0,a.jsx)(n.strong,{children:\"object\"}),\" ko\\u2019rinishida berib yuboramiz va \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyada shu parametrlar bilan ishlaymiz.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getFetch(url,params = {}) {\n    const queryString = Object.entries(params).map(param => {\n        return \\`\\${param[0]}=\\${param[1]}\\`;\n    }).join(\"&\");\n    try {\n        const res = await fetch(\\`\\${url}?\\${queryString}\\`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n        });\n        console.log(posts);\n}\n\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Funksiyamiz o\\u2019ziga \",(0,a.jsx)(n.strong,{children:\"params\"}),\" nomli objectni oladi. U object esa quyidagi ko\\u2019rinishda bo\\u2019ladi \",(0,a.jsx)(n.code,{children:\"{userId:1}\"}),\" . Lekin biz parametrni \",(0,a.jsx)(n.strong,{children:\"sql command\"}),\" sifatida berib yuborishimiz kerak. Shuning uchun ham \",(0,a.jsx)(n.strong,{children:\"queryString\"}),\" degan o\\u2019zgaruvchiga har bitta parametrni ichidagi property \",(0,a.jsx)(n.em,{children:\"(key:value)\"}),\" larni \",(0,a.jsx)(n.strong,{children:\"sql commandga\"}),\" o\\u2019giradi. Masalan funksiyaning \",(0,a.jsx)(n.strong,{children:\"params\"}),\" argumentiga \",(0,a.jsx)(n.code,{children:\"{userId:1, userName:\\u201Djohn\\u201D,userAge:18}\"}),\" qiymatini bersak, bizga \",(0,a.jsx)(n.code,{children:\"userId=1&userName=John&userAge=18\"}),\" ko\\u2019rinishidagi \",(0,a.jsx)(n.strong,{children:\"sql command\"}),\" hosil bo\\u2019ladi. Keyin shu queryString nomli stringni \",(0,a.jsx)(n.strong,{children:\"fetch\"}),\" qilayotganimizda \",(0,a.jsx)(n.strong,{children:\"url\"}),\" ni yoniga qo\\u2019shib qo\\u2019yamiz.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n});\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Bu holatda getFetch() funksiyasida bizning url quyidagi ko'rinishni oladi -> \",(0,a.jsx)(n.a,{href:\"https://jsonplaceholder.typicode.com/posts?userId=1\",children:\"https://jsonplaceholder.typicode.com/posts?userId=1\"})]}),`\n`,(0,a.jsxs)(n.p,{children:[\"Ko\\u2019rganimizdek, facade pattern orqali kodimizni ancha tozaladik va qisqartirdik. Endi facade pattern orqali \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyada \",(0,a.jsx)(n.strong,{children:\"fetch()\"}),\" dan emas axios kutubxonasidan foydalanamiz. Axios ni ishlatganimizda funksiyamiz deyarli o\\u2019zgarmaydi. \",(0,a.jsx)(n.strong,{children:\"Axios\"}),\" ni ishlatish uchun \",(0,a.jsx)(n.strong,{children:\"CDN\"}),\" orqali ulab olsangiz yetadi. \",(0,a.jsx)(n.strong,{children:\"Axios\"}),\" bilan ishlaganimizda \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyasi o\\u2019zgaradi, lekin o\\u2019zgarishi juda ham oson bo\\u2019ladi.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getFetch(link,params = {}) {\n    return axios({\n        url:link,\n        method:\"GET\",\n        params:params\n    }).then(res => res.data).catch(err => console.log(\"Xatolik\",err));\n}\n`})}),`\n`,(0,a.jsx)(n.p,{children:\"Ko\\u2019rganingizdek, unchalik ham ko\\u2019p o\\u2019zgarish yo\\u2019q. O\\u2019qishga juda ham sodda. Endi ushbu funksiyamizni qolgan joylarda ishlata olamiz.\"}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`\nasync function getFetch(url,params = {}) {\n    return axios({\n        url:url,\n        method:\"GET\",\n        params:params\n    }).then(res => res.data).catch(err => console.log(\"Xatolik\",err));\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n        });\n        console.log(posts);\n}\n\nasync function getTodos() {\n        const todos = await getFetch('https://jsonplaceholder.typicode.com/todos/1');\n        console.log(todos);\n}\n\nasync function getPhotos() {\n    const photos = await getFetch(\"https://jsonplaceholder.typicode.com/photos\");\n    console.log(photos);\n}\n\n\nasync function getUsers() {\n    const users = await getFetch(\"https://jsonplaceholder.typicode.com/users\");\n    console.log(users);\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Ko\\u2019rganingizdek, \",(0,a.jsx)(n.strong,{children:\"facade pattern\"}),\" orqali yozgan kodimiz eng boshidagi koddan ancha saviyaliroq. O\\u2019qishga ham tushunishga ham va eng asosiysi o\\u2019zgartirishga ham oson. Haqiqiy \",(0,a.jsx)(n.strong,{children:\"flexible (moslashuvchan) funksiya.\"}),\" Agar biz axios ishlatganimizdayu facade pattern ni ishlatmasak, har bir joyda fetch ning o\\u2019rniga axios yozib chiqishimiz kerak. Eng boshidagi kodga qayting. O\\u2019sha kodda fetchni o\\u2019rniga axios ishlatish kerak bo\\u2019lib qolganda tamom edi. Har bitta fetch ishlatilgan joyni axios ga o\\u2019zgartirish kerak edi. Lekin biz bittagina funksiyani ichida o\\u2019zgartirdik. Lekin dasturimiz ishlashdan to\\u2019xtamadi.\"]}),`\n`,(0,a.jsxs)(n.h1,{id:\"xulosa\",children:[(0,a.jsx)(n.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#xulosa\",children:(0,a.jsx)(n.span,{className:\"icon icon-link\"})}),\"Xulosa\"]}),`\n`,(0,a.jsxs)(n.p,{children:[\"Facade pattern ning maqsadi ishlatishga noqulay bo\\u2019lgan \",(0,a.jsx)(n.strong,{children:\"API\"}),\" ni ishlatish qulay bo\\u2019lgan \",(0,a.jsx)(n.strong,{children:\"API\"}),\" ga aylantirishdir. Bir marta yaxshilab qulay qilib funksiya yozib olasiz va uni ishlataverasiz. Mabodo axios ishlatishingiz kerak bo\\u2019lib qolsa kodingizni faqat bir joyda o\\u2019zgartirasiz. Xato qilish ehtimolingiz kamroq bo\\u2019ladi.\"]})]})}function q(i={}){let{wrapper:n}=i.components||{};return n?(0,a.jsx)(n,Object.assign({},i,{children:(0,a.jsx)(h,i)})):h(i)}var j=q;return f(x);})();\n;return Component;"
  },
  "_id": "blog/facade-pattern.mdx",
  "_raw": {
    "sourceFilePath": "blog/facade-pattern.mdx",
    "sourceFileName": "facade-pattern.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/facade-pattern"
  },
  "type": "Doc",
  "slug": "/blog/facade-pattern",
  "slugAsParams": "facade-pattern"
}