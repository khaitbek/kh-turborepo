{
  "cacheItemsMap": {
    "blog/arrays-in-js.mdx": {
      "document": {
        "title": "Javascriptda Arraylar",
        "description": "Arraylar har doim ham tushunishga oson emas, ayniqsa siz Javascript dasturchisi bo'lsangiz. Endi javascriptda arraylar qanday ishlashini anglab yetish vaqti keldi",
        "published": true,
        "categories": "Javascript",
        "body": {
          "raw": "\n[](https://medium.com/@khaitbekdev?source=post_page-----2ccb74810244--------------------------------)\n\n[Hayitbek Yusupov](https://medium.com/@khaitbekdev?source=post_page-----2ccb74810244--------------------------------)\n\n5 min read\n\nOct 14, 2022\n\n_Arraylar dasturlash olamida ko’pchilik birinchi ko’rishda qiyin deb o’ylaydigan, ammo aslida unchalik ham qiyin bo’lmagan mavzulardan biri hisoblanadi. Bugun biz arraylarni osonroq yo’l bilan o’rganishga harakat qilamiz._\n\nSiz katta ehtimol bilan o’zgaruvchilar bilan tanishsiz. O’zgaruvchilar o’zida qandaydir qiymatni saqlaydi. Arraylar ham o’zgaruvchi, faqat ular o’zida bir nechta qiymatlar (o’zgaruvchilar) saqlash mumkin. Arrayni bir quti desak, uning ichida bir qancha narsalar bo’lishi mumkin. Masalan hammamiz bozorda tuxum olganmiz, to’g’rimi? Lekin hech tuxumlar joylangan idishga yaxshilab e’tibor berganmisiz? Mana shu holat arraylarga yaxshi misol bo’la oladi. Qandaydir quti yoki konteyner, uning ichida esa bir qancha narsalar bor. Pastdagi rasmda biz 12 ta tuxum joylashgan qutini ko’rishimiz mumkin. Arraylar ham o’zida qiymatlarni deyarli shunday saqlaydi.\n\n![](https://miro.medium.com/v2/resize:fit:504/0*DuFgfEGe019v8ViX.jpeg)\n\nArraylar o’zida turli xil qiymatlar— son, matn va hokazolarni saqlashi mumkin. Tepadagi rasmda ko’rib turganingizdek arraydagi elementlarga indeks orqali murojaat qilinadi. Ya’ni arraydagi elementlarni arraydagi joylashuvi bo’ladi. Arraydagi birinchi elementning indeksi doim 0 bo’ladi. Bu deyarli barcha dasturlash tillarida bir xil. Biz arraydagi eng birinchi elementni ekranga chiqarishimiz uchun arrayning 0-elementiga murojaat qilishimiz kerak.\n\n```\nlet array = [‘🥚’, ‘📱’ ,’🍈’ ,’🍉’ ,’🍎’ ,’🍋’]\nconsole.log(array[0]) // 🥚\nlet array = ['🥚', '📱' ,'🍈' ,'🍉' ,'🍎' ,'🍋']\nconsole.log(array[4]) // 🍎\n```\n\nKo’rib turganingizdek arrayning 4-indeksdagi elementini ekranga chiqarganimizda arraydagi 5-element ekranga chiqdi. Bunga sabab esa arrayda tartib 0 raqamidan boshlanadi. Elementlarning joylashuvi indeks bo’yicha, indekslar esa 0 raqamidan boshlanadi.\n\n![](https://miro.medium.com/v2/resize:fit:875/0*HNVmQQNpLNUJDmNS.jpg)\n\nTepadagi rasmga bir e’tibor beraylik. Value — qiymat, index — indeks, lower bound — arrayning boshi, upper bound — arrayning oxiri, array length — arraydagi elementlar soni esa 9 ta.\n\n# Arraydagi ma’lumotlar xotirada qanday saqlanadi?\n\nBiz qandaydir arrayni e’lon qilganimizda, kompyuter o’sha arrayda nechta element borligiga qarab, array uchun xotiradan joy ajratadi, dangalroq tushuntirganda xotiradan kataklar ajratadi. Masalan bizda `raqamlar = [1,2,3,4,5]` array bor. Keling bu array xotirada qanday saqlanishini rasm misolida ko’rishga harakat qilamiz.\n\n![](https://miro.medium.com/v2/resize:fit:300/0*24a8AX0Vh7afJFKs)\n\nKo’rib turganingizdek, arrayda 5 ta element bor, indekslar, qiymatlar bor, ammo bizga eng qiziq joyi **Base Address** degan joyi. U yerda **1000, 1002, 1004, 1006, 1008** sonlari bor. U sonlar nima? U sonlar o’sha arraydagi qiymatning xotirada saqlangan manzili. Ya’ni arraydagi birinchi qiymat **10** soni uning xotirada saqlangan manzili esa **1000**. O’zi aslida xotiradagi manzillar `0x7ffe5367e044` shu ko’rinishda bo’ladi, lekin biz uchun oddiy sonlar bilan tushunish osonroq. Xulosa qilib aytish mumkinki, biz kompyuterga array ochmoqchiligimizni aytamiz, keyin esa u arrayni ichiga qiymatlar beramiz. Kompyuter esa nechta qiymat borligiga qarab xotiradan array uchun joy ajratib beradi.\n\n# Ichma-ich array\n\n![](https://miro.medium.com/v2/resize:fit:875/0*QiZItmbEOiDAT1Uf.png)\n\nIchma-ich arraylarni nima ekanligini yaxshi tushunish uchun biz shaxmat doskasiga qaraymiz. Shaxmat doskasida 8 ta qator, 8ta ustun, umumiy 64 ta katak bor. Bu degani har bir qatorda 8 tadan ustun bor degani. Qator nima ustun nima? Qator deganda biz 1, 2, 3, 4, 5, 6, 7, 8, 9 raqamlarini tushunsak bo’ladi, ustun deganda esa o’sha raqamlarni o’ng tarafidagi 8 ta kataklarni tushunsak bo’ladi. Bu nima degani o’zi? Keling shu shaxmat doskasini array deb tasavvur qilaylik.\n\n```\nlet shaxmat_doskasi = [\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H']\n]\n```\n\nKo’rib turganingizdek , bizda `shaxmat_doskasi` nomli array bor, uni ichida esa 8 ta array bor. Bu degani bizda katta quti bor, qutini ichida esa yana 8ta mayda qutilar bor, u mayda qutilarni ichida esa 8 tadan elementlar (kataklar) bor. Endi biz boshida ko’rdikki, arraydagi elementlarga indeks orqali murojaat qila olamiz. Keling endi bu arrayning birinchi elementini ekranga chiqarib ko’ramiz. Bizga aynan birinchi element kelyaptimi yo’qmi bilish uchun arrayni biroz o’zgartiramiz.\n\n```\nlet shaxmat_doskasi = [\n    ['A','B','C','D','E','F','G','H','1'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H']\n]console.log(shaxmat_doskasi[0])\n// [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', '1']\n```\n\nBiz `shaxmat_doskasi` nomli arrayning 0-indeksidagi elementini ekranga chiqarmoqchi bo’lsak, `[ ‘A’, ‘B’, ‘C’, ‘D’, ‘E’, ‘F’, ‘G’, ‘H’, ‘1’]` shu array ekranga chiqdi. Ya’ni `shaxmat_doskasi` dagi birinchi elementning o’zi bitta array. Endi keling `shaxmat_doskasi` nomli arrayimizdagi aynan bitta katakni ekranga chiqarib ko’ramiz. Shaxmat doskasiga e’tibor beramiz. Biz A1 katakni ekranga chiqarishimiz kerak. Buni esa quyidagicha amalga oshirishimiz mumkin.\n\n```\nlet shaxmat_doskasi = [\n    ['A1','B1','C1','D1','E1','F1','G1','H1'],\n    ['A2','B2','C2','D2','E2','F2','G2','H2'],\n    ['A3','B3','C3','D3','E3','F3','G3','H3'],\n    ['A4','B4','C4','D4','E4','F4','G4','H4'],\n    ['A5','B5','C5','D5','E5','F5','G5','H5'],\n    ['A6','B6','C6','D6','E6','F6','G6','H6'],\n    ['A7','B7','C7','D7','E7','F7','G7','H7'],\n    ['A8','B8','C8','D8','E8','F8','G8','H8']\n]\nconsole.log(shaxmat_doskasi[0][0])\n// A1\n```\n\nBizga bu koddan yangilik bo’lgan joyi `shaxmat_doskasi[0][0]` shu joyi. Birinchi 0 `shaxmat_doskasi` dagi birinchi element. Birinchi elementni o’zini ichida 8 ta element bor, demak ikkinchi 0 o’sha birinchi elementni ichidagi birinchi element. Yodimizdan ko’tarmaylik, indeks 0 dan boshlanadi. 0-element degani bu arraydagi birinchi element degani.\n\n# Arraylar bilan bajariladigan amallar\n\nBiz array ni shunchaki e’lon qilishni ko’rdik, xolos. Ammo, arrayga yangi element qo’shish, yoki elementni o’chirib tashlashni ko’rmadik. Keling hozir biz Javascriptda array bilan bajariladigan 4 ta amallarni ko’ramiz: arrayning oxiriga yangi element qo’shish, arrayning boshiga yangi element qo’shish, arrayning oxiridan bitta elementni o’chirish, arrayning boshidan bitta element o’chirish.\n\n**Arrayning oxiriga yangi element qo’shish**\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.push(6)\nconsole.log(raqamlar)// [ 1, 2, 3, 4, 5, 6 ]\n```\n\nArrayning `push` nomli metodi (funksiyasi) bor. Bu metod o’ziga element(yoki elementlar) qabul qiladi. Qiladigan ishi esa arrayning oxiriga yangi element (yoki elementlari) qo’shadi. Tepadagi kodda bizda `[1,2,3,4,5]` array bor edi. Biz esa `array.push(6)` orqali arrayga 6 sonini qo’shdik. Keyin esa arrayni ekranga chiqardik va ekranga `[1,2,3,4,5,6]` chiqdi. Ya’ni biz arrayning oxiriga 6 raqamini qo’shdik.\n\nPastdagi kodda esa biz arrayning oxiriga bir nechta elementlarni qo’shdik. Bir necha elementlar vergul bilan ajratib yoziladi.\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.push(6,\"John\",\"Doe\")\nconsole.log(raqamlar) // [ 1, 2, 3, 4, 5, 6, 'John', 'Doe' ]\n```\n\n**Arrayning oxiridan 1ta elementni o’chirib tashlash**\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.pop()\nconsole.log(raqamlar) // [ 1, 2, 3, 4 ]\n```\n\nArraydagi navbatdagi metod esa `pop` hisoblanadi. Bu metod o’ziga hech qanday raqam qabul qilmaydi, `push` metodi esa o’ziga son (yoki sonlar) qabul qiladi. `pop` metodi hech narsa qabul qilmaydi va shunchaki arrayning eng oxirgi elementini o’chirib yuboradi.\n\n**Arrayning boshidan bitta elementni o’chirish**\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.shift()\nconsole.log(raqamlar) // [ 2, 3, 4, 5 ]\n```\n\nKo’rib turganimizdek, arrayda `shift` nomli metod bor. Bu metod ham hech qanday qiymat qabul qilmaydi, shunchaki arrayning boshidan bitta elementni o’chirib yuboradi.\n\n**Arrayning boshiga element qo’shish**\n\n```\nlet raqamlar = [1,2,3,4,5]\nraqamlar.unshift(6)\nconsole.log(raqamlar) // [ 6, 1, 2, 3, 4, 5 ]\n```\n\nKo’rib turganimizdek, `unshift` metodi o’ziga element(yoki elementlar) qabul qiladi va qabul qilingan element (yoki elementlar) ni arrayning boshiga qo’shib qo’yadi.\n\n```\nlet array = [1,2,3,4,5] // arrayning boshiga bir nechta elementlar qo'shish// bir nechta elementlar qo'shish uchun vergul bilan ajratib yoziladi\narray.unshift(6,\"Eshmat\",\"Toshmat\")\nconsole.log(array) // [ 6, 'Eshmat', 'Toshmat', 1, 2, 3, 4, 5 ]\n```\n\nArrayda boshqa metodlar ham bor, ammo biz ular haqida bugun gaplashmaymiz. Bizning maqsadimiz shunchaki yaxshi tushuncha hosil qilib olish. Arrayning boshqa metodlari haqida alohida maqola chiqarishga harakat qilaman.\n\n# Arraylarning dasturlash olamidagi o’rni\n\nArraylar dasturlash olamida shunchalik muhimki, har doim ishlatilinib keladi, Junior ham, middle ham, senior ham arraylarni ishlatadi. Arraylarsiz yozilgan kodni tasavvur qilish imkonsiz. Har qanday loyihada eng ko’p ishlatilinadigani bu array. Arraylar bizga juda ko’p qulayliklarni beradi. Shu sababdan ham deyarli barcha dasturlash tillarida arraylar bor, lekin ular har xil nomlanishi mumkin. Masalan Javascriptda arraylar bor, C++ dasturlash tilida esa arraylarni **massiv** deyiladi, Python dasturlash tilida esa **List** deyiladi.\n",
          "code": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var u=(n,a)=>()=>(a||n((a={exports:{}}).exports,a),a.exports),k=(n,a)=>{for(var r in a)l(n,r,{get:a[r],enumerable:!0})},o=(n,a,r,d)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let e of g(a))!b.call(n,e)&&e!==r&&l(n,e,{get:()=>a[e],enumerable:!(d=c(a,e))||d.enumerable});return n};var q=(n,a,r)=>(r=n!=null?m(y(n)):{},o(a||!n||!n.__esModule?l(r,\"default\",{value:n,enumerable:!0}):r,n)),p=n=>o(l({},\"__esModule\",{value:!0}),n);var s=u((E,h)=>{h.exports=_jsx_runtime});var B={};k(B,{default:()=>A,frontmatter:()=>z});var i=q(s()),z={title:\"Javascriptda Arraylar\",description:\"Arraylar har doim ham tushunishga oson emas, ayniqsa siz Javascript dasturchisi bo'lsangiz. Endi javascriptda arraylar qanday ishlashini anglab yetish vaqti keldi\",categories:\"Javascript\"};function t(n){let a=Object.assign({p:\"p\",a:\"a\",em:\"em\",img:\"img\",pre:\"pre\",code:\"code\",h1:\"h1\",span:\"span\",strong:\"strong\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----2ccb74810244--------------------------------\"})}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----2ccb74810244--------------------------------\",children:\"Hayitbek Yusupov\"})}),`\n`,(0,i.jsx)(a.p,{children:\"5 min read\"}),`\n`,(0,i.jsx)(a.p,{children:\"Oct 14, 2022\"}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.em,{children:\"Arraylar dasturlash olamida ko\\u2019pchilik birinchi ko\\u2019rishda qiyin deb o\\u2019ylaydigan, ammo aslida unchalik ham qiyin bo\\u2019lmagan mavzulardan biri hisoblanadi. Bugun biz arraylarni osonroq yo\\u2019l bilan o\\u2019rganishga harakat qilamiz.\"})}),`\n`,(0,i.jsx)(a.p,{children:\"Siz katta ehtimol bilan o\\u2019zgaruvchilar bilan tanishsiz. O\\u2019zgaruvchilar o\\u2019zida qandaydir qiymatni saqlaydi. Arraylar ham o\\u2019zgaruvchi, faqat ular o\\u2019zida bir nechta qiymatlar (o\\u2019zgaruvchilar) saqlash mumkin. Arrayni bir quti desak, uning ichida bir qancha narsalar bo\\u2019lishi mumkin. Masalan hammamiz bozorda tuxum olganmiz, to\\u2019g\\u2019rimi? Lekin hech tuxumlar joylangan idishga yaxshilab e\\u2019tibor berganmisiz? Mana shu holat arraylarga yaxshi misol bo\\u2019la oladi. Qandaydir quti yoki konteyner, uning ichida esa bir qancha narsalar bor. Pastdagi rasmda biz 12 ta tuxum joylashgan qutini ko\\u2019rishimiz mumkin. Arraylar ham o\\u2019zida qiymatlarni deyarli shunday saqlaydi.\"}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{src:\"https://miro.medium.com/v2/resize:fit:504/0*DuFgfEGe019v8ViX.jpeg\",alt:\"\"})}),`\n`,(0,i.jsx)(a.p,{children:\"Arraylar o\\u2019zida turli xil qiymatlar\\u2014 son, matn va hokazolarni saqlashi mumkin. Tepadagi rasmda ko\\u2019rib turganingizdek arraydagi elementlarga indeks orqali murojaat qilinadi. Ya\\u2019ni arraydagi elementlarni arraydagi joylashuvi bo\\u2019ladi. Arraydagi birinchi elementning indeksi doim 0 bo\\u2019ladi. Bu deyarli barcha dasturlash tillarida bir xil. Biz arraydagi eng birinchi elementni ekranga chiqarishimiz uchun arrayning 0-elementiga murojaat qilishimiz kerak.\"}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let array = [\\u2018\\u{1F95A}\\u2019, \\u2018\\u{1F4F1}\\u2019 ,\\u2019\\u{1F348}\\u2019 ,\\u2019\\u{1F349}\\u2019 ,\\u2019\\u{1F34E}\\u2019 ,\\u2019\\u{1F34B}\\u2019]\nconsole.log(array[0]) // \\u{1F95A}\nlet array = ['\\u{1F95A}', '\\u{1F4F1}' ,'\\u{1F348}' ,'\\u{1F349}' ,'\\u{1F34E}' ,'\\u{1F34B}']\nconsole.log(array[4]) // \\u{1F34E}\n`})}),`\n`,(0,i.jsx)(a.p,{children:\"Ko\\u2019rib turganingizdek arrayning 4-indeksdagi elementini ekranga chiqarganimizda arraydagi 5-element ekranga chiqdi. Bunga sabab esa arrayda tartib 0 raqamidan boshlanadi. Elementlarning joylashuvi indeks bo\\u2019yicha, indekslar esa 0 raqamidan boshlanadi.\"}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{src:\"https://miro.medium.com/v2/resize:fit:875/0*HNVmQQNpLNUJDmNS.jpg\",alt:\"\"})}),`\n`,(0,i.jsx)(a.p,{children:\"Tepadagi rasmga bir e\\u2019tibor beraylik. Value \\u2014 qiymat, index \\u2014 indeks, lower bound \\u2014 arrayning boshi, upper bound \\u2014 arrayning oxiri, array length \\u2014 arraydagi elementlar soni esa 9 ta.\"}),`\n`,(0,i.jsxs)(a.h1,{id:\"arraydagi-malumotlar-xotirada-qanday-saqlanadi\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#arraydagi-malumotlar-xotirada-qanday-saqlanadi\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Arraydagi ma\\u2019lumotlar xotirada qanday saqlanadi?\"]}),`\n`,(0,i.jsxs)(a.p,{children:[\"Biz qandaydir arrayni e\\u2019lon qilganimizda, kompyuter o\\u2019sha arrayda nechta element borligiga qarab, array uchun xotiradan joy ajratadi, dangalroq tushuntirganda xotiradan kataklar ajratadi. Masalan bizda \",(0,i.jsx)(a.code,{children:\"raqamlar = [1,2,3,4,5]\"}),\" array bor. Keling bu array xotirada qanday saqlanishini rasm misolida ko\\u2019rishga harakat qilamiz.\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{src:\"https://miro.medium.com/v2/resize:fit:300/0*24a8AX0Vh7afJFKs\",alt:\"\"})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Ko\\u2019rib turganingizdek, arrayda 5 ta element bor, indekslar, qiymatlar bor, ammo bizga eng qiziq joyi \",(0,i.jsx)(a.strong,{children:\"Base Address\"}),\" degan joyi. U yerda \",(0,i.jsx)(a.strong,{children:\"1000, 1002, 1004, 1006, 1008\"}),\" sonlari bor. U sonlar nima? U sonlar o\\u2019sha arraydagi qiymatning xotirada saqlangan manzili. Ya\\u2019ni arraydagi birinchi qiymat \",(0,i.jsx)(a.strong,{children:\"10\"}),\" soni uning xotirada saqlangan manzili esa \",(0,i.jsx)(a.strong,{children:\"1000\"}),\". O\\u2019zi aslida xotiradagi manzillar \",(0,i.jsx)(a.code,{children:\"0x7ffe5367e044\"}),\" shu ko\\u2019rinishda bo\\u2019ladi, lekin biz uchun oddiy sonlar bilan tushunish osonroq. Xulosa qilib aytish mumkinki, biz kompyuterga array ochmoqchiligimizni aytamiz, keyin esa u arrayni ichiga qiymatlar beramiz. Kompyuter esa nechta qiymat borligiga qarab xotiradan array uchun joy ajratib beradi.\"]}),`\n`,(0,i.jsxs)(a.h1,{id:\"ichma-ich-array\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#ichma-ich-array\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Ichma-ich array\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{src:\"https://miro.medium.com/v2/resize:fit:875/0*QiZItmbEOiDAT1Uf.png\",alt:\"\"})}),`\n`,(0,i.jsx)(a.p,{children:\"Ichma-ich arraylarni nima ekanligini yaxshi tushunish uchun biz shaxmat doskasiga qaraymiz. Shaxmat doskasida 8 ta qator, 8ta ustun, umumiy 64 ta katak bor. Bu degani har bir qatorda 8 tadan ustun bor degani. Qator nima ustun nima? Qator deganda biz 1, 2, 3, 4, 5, 6, 7, 8, 9 raqamlarini tushunsak bo\\u2019ladi, ustun deganda esa o\\u2019sha raqamlarni o\\u2019ng tarafidagi 8 ta kataklarni tushunsak bo\\u2019ladi. Bu nima degani o\\u2019zi? Keling shu shaxmat doskasini array deb tasavvur qilaylik.\"}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let shaxmat_doskasi = [\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H']\n]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Ko\\u2019rib turganingizdek , bizda \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" nomli array bor, uni ichida esa 8 ta array bor. Bu degani bizda katta quti bor, qutini ichida esa yana 8ta mayda qutilar bor, u mayda qutilarni ichida esa 8 tadan elementlar (kataklar) bor. Endi biz boshida ko\\u2019rdikki, arraydagi elementlarga indeks orqali murojaat qila olamiz. Keling endi bu arrayning birinchi elementini ekranga chiqarib ko\\u2019ramiz. Bizga aynan birinchi element kelyaptimi yo\\u2019qmi bilish uchun arrayni biroz o\\u2019zgartiramiz.\"]}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let shaxmat_doskasi = [\n    ['A','B','C','D','E','F','G','H','1'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H'],\n    ['A','B','C','D','E','F','G','H']\n]console.log(shaxmat_doskasi[0])\n// [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', '1']\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Biz \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" nomli arrayning 0-indeksidagi elementini ekranga chiqarmoqchi bo\\u2019lsak, \",(0,i.jsx)(a.code,{children:\"[ \\u2018A\\u2019, \\u2018B\\u2019, \\u2018C\\u2019, \\u2018D\\u2019, \\u2018E\\u2019, \\u2018F\\u2019, \\u2018G\\u2019, \\u2018H\\u2019, \\u20181\\u2019]\"}),\" shu array ekranga chiqdi. Ya\\u2019ni \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" dagi birinchi elementning o\\u2019zi bitta array. Endi keling \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" nomli arrayimizdagi aynan bitta katakni ekranga chiqarib ko\\u2019ramiz. Shaxmat doskasiga e\\u2019tibor beramiz. Biz A1 katakni ekranga chiqarishimiz kerak. Buni esa quyidagicha amalga oshirishimiz mumkin.\"]}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let shaxmat_doskasi = [\n    ['A1','B1','C1','D1','E1','F1','G1','H1'],\n    ['A2','B2','C2','D2','E2','F2','G2','H2'],\n    ['A3','B3','C3','D3','E3','F3','G3','H3'],\n    ['A4','B4','C4','D4','E4','F4','G4','H4'],\n    ['A5','B5','C5','D5','E5','F5','G5','H5'],\n    ['A6','B6','C6','D6','E6','F6','G6','H6'],\n    ['A7','B7','C7','D7','E7','F7','G7','H7'],\n    ['A8','B8','C8','D8','E8','F8','G8','H8']\n]\nconsole.log(shaxmat_doskasi[0][0])\n// A1\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Bizga bu koddan yangilik bo\\u2019lgan joyi \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi[0][0]\"}),\" shu joyi. Birinchi 0 \",(0,i.jsx)(a.code,{children:\"shaxmat_doskasi\"}),\" dagi birinchi element. Birinchi elementni o\\u2019zini ichida 8 ta element bor, demak ikkinchi 0 o\\u2019sha birinchi elementni ichidagi birinchi element. Yodimizdan ko\\u2019tarmaylik, indeks 0 dan boshlanadi. 0-element degani bu arraydagi birinchi element degani.\"]}),`\n`,(0,i.jsxs)(a.h1,{id:\"arraylar-bilan-bajariladigan-amallar\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#arraylar-bilan-bajariladigan-amallar\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Arraylar bilan bajariladigan amallar\"]}),`\n`,(0,i.jsx)(a.p,{children:\"Biz array ni shunchaki e\\u2019lon qilishni ko\\u2019rdik, xolos. Ammo, arrayga yangi element qo\\u2019shish, yoki elementni o\\u2019chirib tashlashni ko\\u2019rmadik. Keling hozir biz Javascriptda array bilan bajariladigan 4 ta amallarni ko\\u2019ramiz: arrayning oxiriga yangi element qo\\u2019shish, arrayning boshiga yangi element qo\\u2019shish, arrayning oxiridan bitta elementni o\\u2019chirish, arrayning boshidan bitta element o\\u2019chirish.\"}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:\"Arrayning oxiriga yangi element qo\\u2019shish\"})}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.push(6)\nconsole.log(raqamlar)// [ 1, 2, 3, 4, 5, 6 ]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Arrayning \",(0,i.jsx)(a.code,{children:\"push\"}),\" nomli metodi (funksiyasi) bor. Bu metod o\\u2019ziga element(yoki elementlar) qabul qiladi. Qiladigan ishi esa arrayning oxiriga yangi element (yoki elementlari) qo\\u2019shadi. Tepadagi kodda bizda \",(0,i.jsx)(a.code,{children:\"[1,2,3,4,5]\"}),\" array bor edi. Biz esa \",(0,i.jsx)(a.code,{children:\"array.push(6)\"}),\" orqali arrayga 6 sonini qo\\u2019shdik. Keyin esa arrayni ekranga chiqardik va ekranga \",(0,i.jsx)(a.code,{children:\"[1,2,3,4,5,6]\"}),\" chiqdi. Ya\\u2019ni biz arrayning oxiriga 6 raqamini qo\\u2019shdik.\"]}),`\n`,(0,i.jsx)(a.p,{children:\"Pastdagi kodda esa biz arrayning oxiriga bir nechta elementlarni qo\\u2019shdik. Bir necha elementlar vergul bilan ajratib yoziladi.\"}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.push(6,\"John\",\"Doe\")\nconsole.log(raqamlar) // [ 1, 2, 3, 4, 5, 6, 'John', 'Doe' ]\n`})}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:\"Arrayning oxiridan 1ta elementni o\\u2019chirib tashlash\"})}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.pop()\nconsole.log(raqamlar) // [ 1, 2, 3, 4 ]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Arraydagi navbatdagi metod esa \",(0,i.jsx)(a.code,{children:\"pop\"}),\" hisoblanadi. Bu metod o\\u2019ziga hech qanday raqam qabul qilmaydi, \",(0,i.jsx)(a.code,{children:\"push\"}),\" metodi esa o\\u2019ziga son (yoki sonlar) qabul qiladi. \",(0,i.jsx)(a.code,{children:\"pop\"}),\" metodi hech narsa qabul qilmaydi va shunchaki arrayning eng oxirgi elementini o\\u2019chirib yuboradi.\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:\"Arrayning boshidan bitta elementni o\\u2019chirish\"})}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.shift()\nconsole.log(raqamlar) // [ 2, 3, 4, 5 ]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Ko\\u2019rib turganimizdek, arrayda \",(0,i.jsx)(a.code,{children:\"shift\"}),\" nomli metod bor. Bu metod ham hech qanday qiymat qabul qilmaydi, shunchaki arrayning boshidan bitta elementni o\\u2019chirib yuboradi.\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:\"Arrayning boshiga element qo\\u2019shish\"})}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let raqamlar = [1,2,3,4,5]\nraqamlar.unshift(6)\nconsole.log(raqamlar) // [ 6, 1, 2, 3, 4, 5 ]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Ko\\u2019rib turganimizdek, \",(0,i.jsx)(a.code,{children:\"unshift\"}),\" metodi o\\u2019ziga element(yoki elementlar) qabul qiladi va qabul qilingan element (yoki elementlar) ni arrayning boshiga qo\\u2019shib qo\\u2019yadi.\"]}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`let array = [1,2,3,4,5] // arrayning boshiga bir nechta elementlar qo'shish// bir nechta elementlar qo'shish uchun vergul bilan ajratib yoziladi\narray.unshift(6,\"Eshmat\",\"Toshmat\")\nconsole.log(array) // [ 6, 'Eshmat', 'Toshmat', 1, 2, 3, 4, 5 ]\n`})}),`\n`,(0,i.jsx)(a.p,{children:\"Arrayda boshqa metodlar ham bor, ammo biz ular haqida bugun gaplashmaymiz. Bizning maqsadimiz shunchaki yaxshi tushuncha hosil qilib olish. Arrayning boshqa metodlari haqida alohida maqola chiqarishga harakat qilaman.\"}),`\n`,(0,i.jsxs)(a.h1,{id:\"arraylarning-dasturlash-olamidagi-orni\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#arraylarning-dasturlash-olamidagi-orni\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Arraylarning dasturlash olamidagi o\\u2019rni\"]}),`\n`,(0,i.jsxs)(a.p,{children:[\"Arraylar dasturlash olamida shunchalik muhimki, har doim ishlatilinib keladi, Junior ham, middle ham, senior ham arraylarni ishlatadi. Arraylarsiz yozilgan kodni tasavvur qilish imkonsiz. Har qanday loyihada eng ko\\u2019p ishlatilinadigani bu array. Arraylar bizga juda ko\\u2019p qulayliklarni beradi. Shu sababdan ham deyarli barcha dasturlash tillarida arraylar bor, lekin ular har xil nomlanishi mumkin. Masalan Javascriptda arraylar bor, C++ dasturlash tilida esa arraylarni \",(0,i.jsx)(a.strong,{children:\"massiv\"}),\" deyiladi, Python dasturlash tilida esa \",(0,i.jsx)(a.strong,{children:\"List\"}),\" deyiladi.\"]})]})}function x(n={}){let{wrapper:a}=n.components||{};return a?(0,i.jsx)(a,Object.assign({},n,{children:(0,i.jsx)(t,n)})):t(n)}var A=x;return p(B);})();\n;return Component;"
        },
        "_id": "blog/arrays-in-js.mdx",
        "_raw": {
          "sourceFilePath": "blog/arrays-in-js.mdx",
          "sourceFileName": "arrays-in-js.mdx",
          "sourceFileDir": "blog",
          "contentType": "mdx",
          "flattenedPath": "blog/arrays-in-js"
        },
        "type": "Doc",
        "slug": "/blog/arrays-in-js",
        "slugAsParams": "arrays-in-js"
      },
      "documentHash": "1706095087336",
      "hasWarnings": false,
      "documentTypeName": "Doc"
    },
    "blog/facade-pattern.mdx": {
      "document": {
        "title": "Facade pattern",
        "description": "Dasturlash olamida patternlar tushunchasi ancha muhim. Bulardan biri esa Facade pattern",
        "published": true,
        "categories": "Javascript",
        "body": {
          "raw": "\n# Facade pattern\n\n[](https://medium.com/@khaitbekdev?source=post_page-----d01332673915--------------------------------)\n\n[Hayitbek Yusupov](https://medium.com/@khaitbekdev?source=post_page-----d01332673915--------------------------------)\n\n4 min read\n\nNov 26, 2022\n\nBugungi postda ko’pchilik (asosan boshlang’ich) dasturchilar funksiyalarni ishlatishda yo’l qo’yadigan xatolardan birini ko’rib chiqamiz. Bu xato funksiyani faqat bir holatga to’g’irlashdir. Ya’ni funksiya aynan bir holatga ishlaydi, lekin keyinchalik dasturga o’zgartirishlar kiritilganda funksiyani qaytadan yozib chiqish kerak. Bugun esa qanday qilib funksiyalarimizni **facade pattern** orqali **moslashuvchan** qilishni ko’rib chiqamiz.\n\n# API bilan ishlash\n\nHozir esa javascriptda qandaydir API dan ma’lumot olishda deyarli barcha yozishi ehtimoli katta bo’lgan kodni tahlil qilamiz. Bu kod 2ta API dan ma’lumotni olib keladi va console ga chiqaradi.\n\n```\nfunction getPosts(){\n    fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\").then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n}\n\nfunction getTodos(){\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n}\n\ngetPosts();\ngetTodos();\n```\n\n**Katta ehtimol bilan barchangizga tanish kod :-)**\n\nKo’rinishidan bu kod yaxshi, alohida funksiyaga olingan, refactoring qilingan. Lekin kodni funksiyani ichiga olib qo’yish bilangina ish bitmaydi. Bu kodda muammolar bor. Keling bu muammoni ko’rish uchun kodni biroz ko’paytiramiz.\n\n```\nfunction getPosts(){\n    fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\").then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n}\n\nfunction getTodos(){\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\nfunction getPhotos(){\n    fetch('https://jsonplaceholder.typicode.com/photos')\n    .then(response => response.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\nfunction getUsers(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => console.log(users))\n    .catch(err => console.log(err));\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n```\n\nBu gal endi biz 4 xil API dan ma’lumot olyapmiz. Lekin baribir kodga qarasangiz muammolarni ko’rasiz. Siz balkim **async/await** ishlatish orqali muammoga yechim topsa bo’lar deb o’ylayotgandursiz. Mayli, keling endi .then() va .catch() lar o’rniga **try/catch** va **async/await** ni ishlatib ko’ramiz.\n\n```\nasync function getPosts() {\n    try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\");\n        const posts = await response.json();\n        console.log(posts);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getTodos() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n        const todos = await response.json();\n        console.log(todos);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getPhotos() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/photos');\n        const photos = await response.json();\n        console.log(photos);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getUsers() {\n    try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n        const users = await response.json();\n        console.log(users);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n```\n\nBiz endi funksiyalarimizda **async/await** va **try catch** ishlatdik. Lekin bu ham muammoni hal qilmaydi. Chunki kodga qarasangiz bir xil kod takror takror kelgan. Bir xil kod qayta qayta kelishi esa albatta yaxshi emas. Biz endi bu muammoni hal qilish uchun **facade** patterndan foydalanamiz.\n\n# Facade pattern\n\nKeling endi bir funksiya yaratamiz. Bu funksiya biz takror-takror yozgan kodni bitta qilib beradi.\n\n```\nasync function getFetch(url) {\n    try {\n        const res = await fetch(`${url}`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\n```\n\nKo’rib turganingizdek bizda funksiya o’ziga **url** degan argument oladi. Keyin esa o’sha **url** ga so’rov yuboradi va kelgan ma’lumotni return qiladi. Biror xatolik yuz bersa, console ga chiqaradi. Endi funksiyalardagi barcha **fetch** ishlatilingan joylarni o’zgartirib chiqamiz. **fetch()** ning o’rniga o’zimizning **getFetch()** funksiyasini ishlatamiz.\n\n```\nasync function getFetch(url) {\n    try {\n        const res = await fetch(`${url}`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\");\n        console.log(posts);\n}\n\nasync function getTodos() {\n        const todos = await getFetch('https://jsonplaceholder.typicode.com/todos/1');\n        console.log(todos);\n}\n\nasync function getPhotos() {\n    const photos = await getFetch(\"https://jsonplaceholder.typicode.com/photos\");\n    console.log(photos);\n}\n\n\nasync function getUsers() {\n    const users = await getFetch(\"https://jsonplaceholder.typicode.com/users\");\n    console.log(users);\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n```\n\nKodimiz qancha **qisqarganiga** bir qara **Karl!** Shuncha qatorlik kodni bitta oddiy funksiyada yozish orqali kodni ancha kamaytirdik. Lekin bu hammasi emas. Keling endi yanayam chuqurroq kirishamiz. Biz API dan qandaydir ma’lumotni **GET** qilmoqchi bo’lsak API linkni oxiriga parametrlar berib o’tirishimiz kerak. Masalan `posts?userId=1` va hokazo. Buni qo’lda yozib o’tirish biroz muammoroq. Keling endi shu muammochani ham hal qilamiz. Biz barcha parametrlarni **getFetch()** funksiyamizga **object** ko’rinishida berib yuboramiz va **getFetch()** funksiyada shu parametrlar bilan ishlaymiz.\n\n```\nasync function getFetch(url,params = {}) {\n    const queryString = Object.entries(params).map(param => {\n        return `${param[0]}=${param[1]}`;\n    }).join(\"&\");\n    try {\n        const res = await fetch(`${url}?${queryString}`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n        });\n        console.log(posts);\n}\n\n```\n\nFunksiyamiz o’ziga **params** nomli objectni oladi. U object esa quyidagi ko’rinishda bo’ladi `{userId:1}` . Lekin biz parametrni **sql command** sifatida berib yuborishimiz kerak. Shuning uchun ham **queryString** degan o’zgaruvchiga har bitta parametrni ichidagi property _(key:value)_ larni **sql commandga** o’giradi. Masalan funksiyaning **params** argumentiga `{userId:1, userName:”john”,userAge:18}` qiymatini bersak, bizga `userId=1&userName=John&userAge=18` ko’rinishidagi **sql command** hosil bo’ladi. Keyin shu queryString nomli stringni **fetch** qilayotganimizda **url** ni yoniga qo’shib qo’yamiz.\n\n```\nconst posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n});\n```\n\nBu holatda getFetch() funksiyasida bizning url quyidagi ko'rinishni oladi -> https://jsonplaceholder.typicode.com/posts?userId=1\n\nKo’rganimizdek, facade pattern orqali kodimizni ancha tozaladik va qisqartirdik. Endi facade pattern orqali **getFetch()** funksiyada **fetch()** dan emas axios kutubxonasidan foydalanamiz. Axios ni ishlatganimizda funksiyamiz deyarli o’zgarmaydi. **Axios** ni ishlatish uchun **CDN** orqali ulab olsangiz yetadi. **Axios** bilan ishlaganimizda **getFetch()** funksiyasi o’zgaradi, lekin o’zgarishi juda ham oson bo’ladi.\n\n```\nasync function getFetch(link,params = {}) {\n    return axios({\n        url:link,\n        method:\"GET\",\n        params:params\n    }).then(res => res.data).catch(err => console.log(\"Xatolik\",err));\n}\n```\n\nKo’rganingizdek, unchalik ham ko’p o’zgarish yo’q. O’qishga juda ham sodda. Endi ushbu funksiyamizni qolgan joylarda ishlata olamiz.\n\n```\n\nasync function getFetch(url,params = {}) {\n    return axios({\n        url:url,\n        method:\"GET\",\n        params:params\n    }).then(res => res.data).catch(err => console.log(\"Xatolik\",err));\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n        });\n        console.log(posts);\n}\n\nasync function getTodos() {\n        const todos = await getFetch('https://jsonplaceholder.typicode.com/todos/1');\n        console.log(todos);\n}\n\nasync function getPhotos() {\n    const photos = await getFetch(\"https://jsonplaceholder.typicode.com/photos\");\n    console.log(photos);\n}\n\n\nasync function getUsers() {\n    const users = await getFetch(\"https://jsonplaceholder.typicode.com/users\");\n    console.log(users);\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n```\n\nKo’rganingizdek, **facade pattern** orqali yozgan kodimiz eng boshidagi koddan ancha saviyaliroq. O’qishga ham tushunishga ham va eng asosiysi o’zgartirishga ham oson. Haqiqiy **flexible (moslashuvchan) funksiya.** Agar biz axios ishlatganimizdayu facade pattern ni ishlatmasak, har bir joyda fetch ning o’rniga axios yozib chiqishimiz kerak. Eng boshidagi kodga qayting. O’sha kodda fetchni o’rniga axios ishlatish kerak bo’lib qolganda tamom edi. Har bitta fetch ishlatilgan joyni axios ga o’zgartirish kerak edi. Lekin biz bittagina funksiyani ichida o’zgartirdik. Lekin dasturimiz ishlashdan to’xtamadi.\n\n# Xulosa\n\nFacade pattern ning maqsadi ishlatishga noqulay bo’lgan **API** ni ishlatish qulay bo’lgan **API** ga aylantirishdir. Bir marta yaxshilab qulay qilib funksiya yozib olasiz va uni ishlataverasiz. Mabodo axios ishlatishingiz kerak bo’lib qolsa kodingizni faqat bir joyda o’zgartirasiz. Xato qilish ehtimolingiz kamroq bo’ladi.\n",
          "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),k=(i,n)=>{for(var o in n)s(i,o,{get:n[o],enumerable:!0})},r=(i,n,o,t)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let e of p(n))!m.call(i,e)&&e!==o&&s(i,e,{get:()=>n[e],enumerable:!(t=g(n,e))||t.enumerable});return i};var b=(i,n,o)=>(o=i!=null?d(u(i)):{},r(n||!i||!i.__esModule?s(o,\"default\",{value:i,enumerable:!0}):o,i)),f=i=>r(s({},\"__esModule\",{value:!0}),i);var l=y((w,c)=>{c.exports=_jsx_runtime});var x={};k(x,{default:()=>j,frontmatter:()=>z});var a=b(l()),z={title:\"Facade pattern\",description:\"Dasturlash olamida patternlar tushunchasi ancha muhim. Bulardan biri esa Facade pattern\",categories:\"Javascript\"};function h(i){let n=Object.assign({h1:\"h1\",a:\"a\",span:\"span\",p:\"p\",strong:\"strong\",pre:\"pre\",code:\"code\",em:\"em\"},i.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:\"facade-pattern\",children:[(0,a.jsx)(n.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#facade-pattern\",children:(0,a.jsx)(n.span,{className:\"icon icon-link\"})}),\"Facade pattern\"]}),`\n`,(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----d01332673915--------------------------------\"})}),`\n`,(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----d01332673915--------------------------------\",children:\"Hayitbek Yusupov\"})}),`\n`,(0,a.jsx)(n.p,{children:\"4 min read\"}),`\n`,(0,a.jsx)(n.p,{children:\"Nov 26, 2022\"}),`\n`,(0,a.jsxs)(n.p,{children:[\"Bugungi postda ko\\u2019pchilik (asosan boshlang\\u2019ich) dasturchilar funksiyalarni ishlatishda yo\\u2019l qo\\u2019yadigan xatolardan birini ko\\u2019rib chiqamiz. Bu xato funksiyani faqat bir holatga to\\u2019g\\u2019irlashdir. Ya\\u2019ni funksiya aynan bir holatga ishlaydi, lekin keyinchalik dasturga o\\u2019zgartirishlar kiritilganda funksiyani qaytadan yozib chiqish kerak. Bugun esa qanday qilib funksiyalarimizni \",(0,a.jsx)(n.strong,{children:\"facade pattern\"}),\" orqali \",(0,a.jsx)(n.strong,{children:\"moslashuvchan\"}),\" qilishni ko\\u2019rib chiqamiz.\"]}),`\n`,(0,a.jsxs)(n.h1,{id:\"api-bilan-ishlash\",children:[(0,a.jsx)(n.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#api-bilan-ishlash\",children:(0,a.jsx)(n.span,{className:\"icon icon-link\"})}),\"API bilan ishlash\"]}),`\n`,(0,a.jsx)(n.p,{children:\"Hozir esa javascriptda qandaydir API dan ma\\u2019lumot olishda deyarli barcha yozishi ehtimoli katta bo\\u2019lgan kodni tahlil qilamiz. Bu kod 2ta API dan ma\\u2019lumotni olib keladi va console ga chiqaradi.\"}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`function getPosts(){\n    fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\").then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n}\n\nfunction getTodos(){\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n}\n\ngetPosts();\ngetTodos();\n`})}),`\n`,(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:\"Katta ehtimol bilan barchangizga tanish kod :-)\"})}),`\n`,(0,a.jsx)(n.p,{children:\"Ko\\u2019rinishidan bu kod yaxshi, alohida funksiyaga olingan, refactoring qilingan. Lekin kodni funksiyani ichiga olib qo\\u2019yish bilangina ish bitmaydi. Bu kodda muammolar bor. Keling bu muammoni ko\\u2019rish uchun kodni biroz ko\\u2019paytiramiz.\"}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`function getPosts(){\n    fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\").then(res => res.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n}\n\nfunction getTodos(){\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\nfunction getPhotos(){\n    fetch('https://jsonplaceholder.typicode.com/photos')\n    .then(response => response.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\nfunction getUsers(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => console.log(users))\n    .catch(err => console.log(err));\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Bu gal endi biz 4 xil API dan ma\\u2019lumot olyapmiz. Lekin baribir kodga qarasangiz muammolarni ko\\u2019rasiz. Siz balkim \",(0,a.jsx)(n.strong,{children:\"async/await\"}),\" ishlatish orqali muammoga yechim topsa bo\\u2019lar deb o\\u2019ylayotgandursiz. Mayli, keling endi .then() va .catch() lar o\\u2019rniga \",(0,a.jsx)(n.strong,{children:\"try/catch\"}),\" va \",(0,a.jsx)(n.strong,{children:\"async/await\"}),\" ni ishlatib ko\\u2019ramiz.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getPosts() {\n    try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\");\n        const posts = await response.json();\n        console.log(posts);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getTodos() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n        const todos = await response.json();\n        console.log(todos);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getPhotos() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/photos');\n        const photos = await response.json();\n        console.log(photos);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function getUsers() {\n    try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n        const users = await response.json();\n        console.log(users);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Biz endi funksiyalarimizda \",(0,a.jsx)(n.strong,{children:\"async/await\"}),\" va \",(0,a.jsx)(n.strong,{children:\"try catch\"}),\" ishlatdik. Lekin bu ham muammoni hal qilmaydi. Chunki kodga qarasangiz bir xil kod takror takror kelgan. Bir xil kod qayta qayta kelishi esa albatta yaxshi emas. Biz endi bu muammoni hal qilish uchun \",(0,a.jsx)(n.strong,{children:\"facade\"}),\" patterndan foydalanamiz.\"]}),`\n`,(0,a.jsxs)(n.h1,{id:\"facade-pattern-1\",children:[(0,a.jsx)(n.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#facade-pattern-1\",children:(0,a.jsx)(n.span,{className:\"icon icon-link\"})}),\"Facade pattern\"]}),`\n`,(0,a.jsx)(n.p,{children:\"Keling endi bir funksiya yaratamiz. Bu funksiya biz takror-takror yozgan kodni bitta qilib beradi.\"}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getFetch(url) {\n    try {\n        const res = await fetch(\\`\\${url}\\`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Ko\\u2019rib turganingizdek bizda funksiya o\\u2019ziga \",(0,a.jsx)(n.strong,{children:\"url\"}),\" degan argument oladi. Keyin esa o\\u2019sha \",(0,a.jsx)(n.strong,{children:\"url\"}),\" ga so\\u2019rov yuboradi va kelgan ma\\u2019lumotni return qiladi. Biror xatolik yuz bersa, console ga chiqaradi. Endi funksiyalardagi barcha \",(0,a.jsx)(n.strong,{children:\"fetch\"}),\" ishlatilingan joylarni o\\u2019zgartirib chiqamiz. \",(0,a.jsx)(n.strong,{children:\"fetch()\"}),\" ning o\\u2019rniga o\\u2019zimizning \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyasini ishlatamiz.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getFetch(url) {\n    try {\n        const res = await fetch(\\`\\${url}\\`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts?userId=1\");\n        console.log(posts);\n}\n\nasync function getTodos() {\n        const todos = await getFetch('https://jsonplaceholder.typicode.com/todos/1');\n        console.log(todos);\n}\n\nasync function getPhotos() {\n    const photos = await getFetch(\"https://jsonplaceholder.typicode.com/photos\");\n    console.log(photos);\n}\n\n\nasync function getUsers() {\n    const users = await getFetch(\"https://jsonplaceholder.typicode.com/users\");\n    console.log(users);\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Kodimiz qancha \",(0,a.jsx)(n.strong,{children:\"qisqarganiga\"}),\" bir qara \",(0,a.jsx)(n.strong,{children:\"Karl!\"}),\" Shuncha qatorlik kodni bitta oddiy funksiyada yozish orqali kodni ancha kamaytirdik. Lekin bu hammasi emas. Keling endi yanayam chuqurroq kirishamiz. Biz API dan qandaydir ma\\u2019lumotni \",(0,a.jsx)(n.strong,{children:\"GET\"}),\" qilmoqchi bo\\u2019lsak API linkni oxiriga parametrlar berib o\\u2019tirishimiz kerak. Masalan \",(0,a.jsx)(n.code,{children:\"posts?userId=1\"}),\" va hokazo. Buni qo\\u2019lda yozib o\\u2019tirish biroz muammoroq. Keling endi shu muammochani ham hal qilamiz. Biz barcha parametrlarni \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyamizga \",(0,a.jsx)(n.strong,{children:\"object\"}),\" ko\\u2019rinishida berib yuboramiz va \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyada shu parametrlar bilan ishlaymiz.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getFetch(url,params = {}) {\n    const queryString = Object.entries(params).map(param => {\n        return \\`\\${param[0]}=\\${param[1]}\\`;\n    }).join(\"&\");\n    try {\n        const res = await fetch(\\`\\${url}?\\${queryString}\\`);\n        return await res.json();\n    } catch (error) {\n        console.log(\"Xatolik chiqdi\", error);\n    }\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n        });\n        console.log(posts);\n}\n\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Funksiyamiz o\\u2019ziga \",(0,a.jsx)(n.strong,{children:\"params\"}),\" nomli objectni oladi. U object esa quyidagi ko\\u2019rinishda bo\\u2019ladi \",(0,a.jsx)(n.code,{children:\"{userId:1}\"}),\" . Lekin biz parametrni \",(0,a.jsx)(n.strong,{children:\"sql command\"}),\" sifatida berib yuborishimiz kerak. Shuning uchun ham \",(0,a.jsx)(n.strong,{children:\"queryString\"}),\" degan o\\u2019zgaruvchiga har bitta parametrni ichidagi property \",(0,a.jsx)(n.em,{children:\"(key:value)\"}),\" larni \",(0,a.jsx)(n.strong,{children:\"sql commandga\"}),\" o\\u2019giradi. Masalan funksiyaning \",(0,a.jsx)(n.strong,{children:\"params\"}),\" argumentiga \",(0,a.jsx)(n.code,{children:\"{userId:1, userName:\\u201Djohn\\u201D,userAge:18}\"}),\" qiymatini bersak, bizga \",(0,a.jsx)(n.code,{children:\"userId=1&userName=John&userAge=18\"}),\" ko\\u2019rinishidagi \",(0,a.jsx)(n.strong,{children:\"sql command\"}),\" hosil bo\\u2019ladi. Keyin shu queryString nomli stringni \",(0,a.jsx)(n.strong,{children:\"fetch\"}),\" qilayotganimizda \",(0,a.jsx)(n.strong,{children:\"url\"}),\" ni yoniga qo\\u2019shib qo\\u2019yamiz.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n});\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Bu holatda getFetch() funksiyasida bizning url quyidagi ko'rinishni oladi -> \",(0,a.jsx)(n.a,{href:\"https://jsonplaceholder.typicode.com/posts?userId=1\",children:\"https://jsonplaceholder.typicode.com/posts?userId=1\"})]}),`\n`,(0,a.jsxs)(n.p,{children:[\"Ko\\u2019rganimizdek, facade pattern orqali kodimizni ancha tozaladik va qisqartirdik. Endi facade pattern orqali \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyada \",(0,a.jsx)(n.strong,{children:\"fetch()\"}),\" dan emas axios kutubxonasidan foydalanamiz. Axios ni ishlatganimizda funksiyamiz deyarli o\\u2019zgarmaydi. \",(0,a.jsx)(n.strong,{children:\"Axios\"}),\" ni ishlatish uchun \",(0,a.jsx)(n.strong,{children:\"CDN\"}),\" orqali ulab olsangiz yetadi. \",(0,a.jsx)(n.strong,{children:\"Axios\"}),\" bilan ishlaganimizda \",(0,a.jsx)(n.strong,{children:\"getFetch()\"}),\" funksiyasi o\\u2019zgaradi, lekin o\\u2019zgarishi juda ham oson bo\\u2019ladi.\"]}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`async function getFetch(link,params = {}) {\n    return axios({\n        url:link,\n        method:\"GET\",\n        params:params\n    }).then(res => res.data).catch(err => console.log(\"Xatolik\",err));\n}\n`})}),`\n`,(0,a.jsx)(n.p,{children:\"Ko\\u2019rganingizdek, unchalik ham ko\\u2019p o\\u2019zgarish yo\\u2019q. O\\u2019qishga juda ham sodda. Endi ushbu funksiyamizni qolgan joylarda ishlata olamiz.\"}),`\n`,(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:`\nasync function getFetch(url,params = {}) {\n    return axios({\n        url:url,\n        method:\"GET\",\n        params:params\n    }).then(res => res.data).catch(err => console.log(\"Xatolik\",err));\n}\nasync function getPosts() {\n        const posts = await getFetch(\"https://jsonplaceholder.typicode.com/posts\",{\n            userId:1\n        });\n        console.log(posts);\n}\n\nasync function getTodos() {\n        const todos = await getFetch('https://jsonplaceholder.typicode.com/todos/1');\n        console.log(todos);\n}\n\nasync function getPhotos() {\n    const photos = await getFetch(\"https://jsonplaceholder.typicode.com/photos\");\n    console.log(photos);\n}\n\n\nasync function getUsers() {\n    const users = await getFetch(\"https://jsonplaceholder.typicode.com/users\");\n    console.log(users);\n}\n\ngetPosts();\ngetTodos();\ngetPhotos();\ngetUsers();\n`})}),`\n`,(0,a.jsxs)(n.p,{children:[\"Ko\\u2019rganingizdek, \",(0,a.jsx)(n.strong,{children:\"facade pattern\"}),\" orqali yozgan kodimiz eng boshidagi koddan ancha saviyaliroq. O\\u2019qishga ham tushunishga ham va eng asosiysi o\\u2019zgartirishga ham oson. Haqiqiy \",(0,a.jsx)(n.strong,{children:\"flexible (moslashuvchan) funksiya.\"}),\" Agar biz axios ishlatganimizdayu facade pattern ni ishlatmasak, har bir joyda fetch ning o\\u2019rniga axios yozib chiqishimiz kerak. Eng boshidagi kodga qayting. O\\u2019sha kodda fetchni o\\u2019rniga axios ishlatish kerak bo\\u2019lib qolganda tamom edi. Har bitta fetch ishlatilgan joyni axios ga o\\u2019zgartirish kerak edi. Lekin biz bittagina funksiyani ichida o\\u2019zgartirdik. Lekin dasturimiz ishlashdan to\\u2019xtamadi.\"]}),`\n`,(0,a.jsxs)(n.h1,{id:\"xulosa\",children:[(0,a.jsx)(n.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#xulosa\",children:(0,a.jsx)(n.span,{className:\"icon icon-link\"})}),\"Xulosa\"]}),`\n`,(0,a.jsxs)(n.p,{children:[\"Facade pattern ning maqsadi ishlatishga noqulay bo\\u2019lgan \",(0,a.jsx)(n.strong,{children:\"API\"}),\" ni ishlatish qulay bo\\u2019lgan \",(0,a.jsx)(n.strong,{children:\"API\"}),\" ga aylantirishdir. Bir marta yaxshilab qulay qilib funksiya yozib olasiz va uni ishlataverasiz. Mabodo axios ishlatishingiz kerak bo\\u2019lib qolsa kodingizni faqat bir joyda o\\u2019zgartirasiz. Xato qilish ehtimolingiz kamroq bo\\u2019ladi.\"]})]})}function q(i={}){let{wrapper:n}=i.components||{};return n?(0,a.jsx)(n,Object.assign({},i,{children:(0,a.jsx)(h,i)})):h(i)}var j=q;return f(x);})();\n;return Component;"
        },
        "_id": "blog/facade-pattern.mdx",
        "_raw": {
          "sourceFilePath": "blog/facade-pattern.mdx",
          "sourceFileName": "facade-pattern.mdx",
          "sourceFileDir": "blog",
          "contentType": "mdx",
          "flattenedPath": "blog/facade-pattern"
        },
        "type": "Doc",
        "slug": "/blog/facade-pattern",
        "slugAsParams": "facade-pattern"
      },
      "documentHash": "1706002281751",
      "hasWarnings": false,
      "documentTypeName": "Doc"
    },
    "blog/modern-css-2023.mdx": {
      "document": {
        "title": "Zamonaviy CSS ning yangi imkoniyatlari",
        "description": "CSS so'nggi yillarda eng ko'p o'sib borayotgan texnologiyalardan biri. CSS taqdim etayotgan yangiliklar sizni hayron qoldirish aniq",
        "published": true,
        "categories": "CSS",
        "body": {
          "raw": "\n[](https://medium.com/@khaitbekdev?source=post_page-----595516a13236--------------------------------)\n\n[Hayitbek Yusupov](https://medium.com/@khaitbekdev?source=post_page-----595516a13236--------------------------------)\n\n2 min read\n\nMar 8, 2023\n\nCSS bugungi kungacha aksariyat dasturchilar uchun qiyin bo’lib kelgan. Bugungi kunda CSS ni zo’r biladiganlar juda-juda kam. Lekin vaqt o’tgani sari, CSS ham zamonaviylashib bormoqda va shu bilan birgalikda o’rganish va ishlatish uchun osonlashib ham bormoqda. Bugun CSS ning yangi imkoniyatlaridan ba’zilarini ko’rib chiqamiz.\n\n# **Inset va aspect-ratio**\n\n```\n.absolute{\n  position:absolute;\n  top:0;\n  right:0;\n  bottom:0;\n  left:0;\n}\n\n.rounded{\n  width:100px;\n  height:100px;\n  border-radius:50%;\n}\n```\n\nXo’sh… Menimcha bu katta ehtimol bilan siz doim odatiy ravishda yozib yuradigan kod, to’g’rimi? Albatta, bu kodning hech qanday yomon joyi yo’q, lekin CSS dagi `inset` va `aspect-ratio` xususiyatlari orqali biz ushbu kodni soddaroq ko’rinishga keltirishimiz mumkin.\n\n```\n.absolute{\n  position:absolute;\n  inset:0; /* top, right, bottom, left -> 0 */\n}\n\n.rounded{\n  width:100px;\n  aspect-ratio:1; /* width, height ikkalasi 100px, agar widthni 150px qilsam height ham 150px bo'ladi */\n  border-radius:50%;\n}\n```\n\n# **min(), max(), clamp() va hokazolar**\n\nOdatda frontendchilar CSS ni o’rganayotganlarida eng birinchilardan bo’lib **container** stillarini tuzishni o’rganadilar va deyarli 99% holatda ularning yozadigan stillari quyidagicha bo’ladi:\n\n```\n.container{\n  width:100%;\n  max-width:1240px;\n  margin:0 auto;\n  padding: 0 20px;\n}\n```\n\nYana qaytaraman, bu kodlarni hech qanday yomon tomoni yo’q, shunchaki ularni yaxshilash mumkin. Keling endi shu kodni soddalashtiramiz:\n\n```\n.container{\n  width:min(100%, 1240px); /* viewport width ga qarab eng kichigini tanlaydi*/\n  margin-inline:auto; /* margin-left va margin-right uchun qisqartma */\n  padding-inline:20px; /* padding-left va padding-right uchun qisqartma */\n}\n```\n\nKodni tahlil qiladigan bo’lsak, **min()** va **max()** funksiyalari o’ziga ikkita qiymat qabul qiladi. **min() viewport width** ga ko’ra ikki qiymatdan eng kichigini tanlasa, **max()** eng kattasini tanlaydi. **margin-inline, padding-inline** lar esa **logical property** deyiladi. Ularga o’xshash propertylar CSS da yetarlicha:\n\n- **margin-inline-start (margin-left)**, **margin-inline-end (margin-right)** va xuddi shu holat **padding** uchun ham mavjud.\n- **margin-block (margin-top** va **margin-bottom), margin-block-start (margin-top), margin-block-end (margin-bottom)** va xuddi shu holat **padding** uchun ham mavjud.\n\n# Responsive tipografiya\n\nCSS dagi yangi **clamp()** funksiyasi orqali responsive typography birmuncha yengillashdi. Biz bu funksiyaga 3 ta qiymat berishimiz kerak:\n\n- eng minimum qiymat\n- boshlang’ich qiymat\n- eng maximum qiymat\n\n```\n.page-title{\n  font-size:clamp(1.5rem, 3rem, 6rem);\n}\n```\n\nKodni tahlil qiladigan bo’lsak, bizda font-size:\n\n- eng kamida **1.5rem** bo’ladi, ya’ni eng minimum qiymat **1.5rem.**\n- boshlang’ich qiymati esa **3rem,** agar boshlang’ich qiymat katta bo’lsa, eng minimum qiymatgacha avtomatik kamayadi, lekin eng minimum qiymatdan pastga o’tmaydi.\n- eng ko’pi bilan **6rem** bo’ladi, ya’ni **6rem** dan katta bo’lib ketmaydi.\n\n**clamp()** ko’p holatlarda ishlatilinishi mumkin, masalan **tipografiya** yoki **margin, paddinglar** uchun.\n\n_Bugungi o’rganganlarimiz haqida batafsil ushbu_ [_havolada_](https://codepen.io/khaitbek/pen/XWPNQxB) _ma’lumot olishingiz mumkin. Bundan tashqari, o’zingiz mustaqil ravishda boshqa manbalardan ham izlanishingiz maqsadga muvofiq._\n",
          "code": "var Component=(()=>{var c=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var b=(a,i)=>()=>(i||a((i={exports:{}}).exports,i),i.exports),k=(a,i)=>{for(var r in i)l(a,r,{get:i[r],enumerable:!0})},t=(a,i,r,o)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let e of g(i))!p.call(a,e)&&e!==r&&l(a,e,{get:()=>i[e],enumerable:!(o=m(i,e))||o.enumerable});return a};var y=(a,i,r)=>(r=a!=null?c(u(a)):{},t(i||!a||!a.__esModule?l(r,\"default\",{value:a,enumerable:!0}):r,a)),q=a=>t(l({},\"__esModule\",{value:!0}),a);var h=b((C,d)=>{d.exports=_jsx_runtime});var z={};k(z,{default:()=>f,frontmatter:()=>v});var n=y(h()),v={title:\"Zamonaviy CSS ning yangi imkoniyatlari\",description:\"CSS so'nggi yillarda eng ko'p o'sib borayotgan texnologiyalardan biri. CSS taqdim etayotgan yangiliklar sizni hayron qoldirish aniq\",categories:\"CSS\"};function s(a){let i=Object.assign({p:\"p\",a:\"a\",h1:\"h1\",span:\"span\",strong:\"strong\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\",em:\"em\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----595516a13236--------------------------------\"})}),`\n`,(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----595516a13236--------------------------------\",children:\"Hayitbek Yusupov\"})}),`\n`,(0,n.jsx)(i.p,{children:\"2 min read\"}),`\n`,(0,n.jsx)(i.p,{children:\"Mar 8, 2023\"}),`\n`,(0,n.jsx)(i.p,{children:\"CSS bugungi kungacha aksariyat dasturchilar uchun qiyin bo\\u2019lib kelgan. Bugungi kunda CSS ni zo\\u2019r biladiganlar juda-juda kam. Lekin vaqt o\\u2019tgani sari, CSS ham zamonaviylashib bormoqda va shu bilan birgalikda o\\u2019rganish va ishlatish uchun osonlashib ham bormoqda. Bugun CSS ning yangi imkoniyatlaridan ba\\u2019zilarini ko\\u2019rib chiqamiz.\"}),`\n`,(0,n.jsxs)(i.h1,{id:\"inset-va-aspect-ratio\",children:[(0,n.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#inset-va-aspect-ratio\",children:(0,n.jsx)(i.span,{className:\"icon icon-link\"})}),(0,n.jsx)(i.strong,{children:\"Inset va aspect-ratio\"})]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`.absolute{\n  position:absolute;\n  top:0;\n  right:0;\n  bottom:0;\n  left:0;\n}\n\n.rounded{\n  width:100px;\n  height:100px;\n  border-radius:50%;\n}\n`})}),`\n`,(0,n.jsxs)(i.p,{children:[\"Xo\\u2019sh\\u2026 Menimcha bu katta ehtimol bilan siz doim odatiy ravishda yozib yuradigan kod, to\\u2019g\\u2019rimi? Albatta, bu kodning hech qanday yomon joyi yo\\u2019q, lekin CSS dagi \",(0,n.jsx)(i.code,{children:\"inset\"}),\" va \",(0,n.jsx)(i.code,{children:\"aspect-ratio\"}),\" xususiyatlari orqali biz ushbu kodni soddaroq ko\\u2019rinishga keltirishimiz mumkin.\"]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`.absolute{\n  position:absolute;\n  inset:0; /* top, right, bottom, left -> 0 */\n}\n\n.rounded{\n  width:100px;\n  aspect-ratio:1; /* width, height ikkalasi 100px, agar widthni 150px qilsam height ham 150px bo'ladi */\n  border-radius:50%;\n}\n`})}),`\n`,(0,n.jsxs)(i.h1,{id:\"min-max-clamp-va-hokazolar\",children:[(0,n.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#min-max-clamp-va-hokazolar\",children:(0,n.jsx)(i.span,{className:\"icon icon-link\"})}),(0,n.jsx)(i.strong,{children:\"min(), max(), clamp() va hokazolar\"})]}),`\n`,(0,n.jsxs)(i.p,{children:[\"Odatda frontendchilar CSS ni o\\u2019rganayotganlarida eng birinchilardan bo\\u2019lib \",(0,n.jsx)(i.strong,{children:\"container\"}),\" stillarini tuzishni o\\u2019rganadilar va deyarli 99% holatda ularning yozadigan stillari quyidagicha bo\\u2019ladi:\"]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`.container{\n  width:100%;\n  max-width:1240px;\n  margin:0 auto;\n  padding: 0 20px;\n}\n`})}),`\n`,(0,n.jsx)(i.p,{children:\"Yana qaytaraman, bu kodlarni hech qanday yomon tomoni yo\\u2019q, shunchaki ularni yaxshilash mumkin. Keling endi shu kodni soddalashtiramiz:\"}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`.container{\n  width:min(100%, 1240px); /* viewport width ga qarab eng kichigini tanlaydi*/\n  margin-inline:auto; /* margin-left va margin-right uchun qisqartma */\n  padding-inline:20px; /* padding-left va padding-right uchun qisqartma */\n}\n`})}),`\n`,(0,n.jsxs)(i.p,{children:[\"Kodni tahlil qiladigan bo\\u2019lsak, \",(0,n.jsx)(i.strong,{children:\"min()\"}),\" va \",(0,n.jsx)(i.strong,{children:\"max()\"}),\" funksiyalari o\\u2019ziga ikkita qiymat qabul qiladi. \",(0,n.jsx)(i.strong,{children:\"min() viewport width\"}),\" ga ko\\u2019ra ikki qiymatdan eng kichigini tanlasa, \",(0,n.jsx)(i.strong,{children:\"max()\"}),\" eng kattasini tanlaydi. \",(0,n.jsx)(i.strong,{children:\"margin-inline, padding-inline\"}),\" lar esa \",(0,n.jsx)(i.strong,{children:\"logical property\"}),\" deyiladi. Ularga o\\u2019xshash propertylar CSS da yetarlicha:\"]}),`\n`,(0,n.jsxs)(i.ul,{children:[`\n`,(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:\"margin-inline-start (margin-left)\"}),\", \",(0,n.jsx)(i.strong,{children:\"margin-inline-end (margin-right)\"}),\" va xuddi shu holat \",(0,n.jsx)(i.strong,{children:\"padding\"}),\" uchun ham mavjud.\"]}),`\n`,(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:\"margin-block (margin-top\"}),\" va \",(0,n.jsx)(i.strong,{children:\"margin-bottom), margin-block-start (margin-top), margin-block-end (margin-bottom)\"}),\" va xuddi shu holat \",(0,n.jsx)(i.strong,{children:\"padding\"}),\" uchun ham mavjud.\"]}),`\n`]}),`\n`,(0,n.jsxs)(i.h1,{id:\"responsive-tipografiya\",children:[(0,n.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#responsive-tipografiya\",children:(0,n.jsx)(i.span,{className:\"icon icon-link\"})}),\"Responsive tipografiya\"]}),`\n`,(0,n.jsxs)(i.p,{children:[\"CSS dagi yangi \",(0,n.jsx)(i.strong,{children:\"clamp()\"}),\" funksiyasi orqali responsive typography birmuncha yengillashdi. Biz bu funksiyaga 3 ta qiymat berishimiz kerak:\"]}),`\n`,(0,n.jsxs)(i.ul,{children:[`\n`,(0,n.jsx)(i.li,{children:\"eng minimum qiymat\"}),`\n`,(0,n.jsx)(i.li,{children:\"boshlang\\u2019ich qiymat\"}),`\n`,(0,n.jsx)(i.li,{children:\"eng maximum qiymat\"}),`\n`]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`.page-title{\n  font-size:clamp(1.5rem, 3rem, 6rem);\n}\n`})}),`\n`,(0,n.jsx)(i.p,{children:\"Kodni tahlil qiladigan bo\\u2019lsak, bizda font-size:\"}),`\n`,(0,n.jsxs)(i.ul,{children:[`\n`,(0,n.jsxs)(i.li,{children:[\"eng kamida \",(0,n.jsx)(i.strong,{children:\"1.5rem\"}),\" bo\\u2019ladi, ya\\u2019ni eng minimum qiymat \",(0,n.jsx)(i.strong,{children:\"1.5rem.\"})]}),`\n`,(0,n.jsxs)(i.li,{children:[\"boshlang\\u2019ich qiymati esa \",(0,n.jsx)(i.strong,{children:\"3rem,\"}),\" agar boshlang\\u2019ich qiymat katta bo\\u2019lsa, eng minimum qiymatgacha avtomatik kamayadi, lekin eng minimum qiymatdan pastga o\\u2019tmaydi.\"]}),`\n`,(0,n.jsxs)(i.li,{children:[\"eng ko\\u2019pi bilan \",(0,n.jsx)(i.strong,{children:\"6rem\"}),\" bo\\u2019ladi, ya\\u2019ni \",(0,n.jsx)(i.strong,{children:\"6rem\"}),\" dan katta bo\\u2019lib ketmaydi.\"]}),`\n`]}),`\n`,(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:\"clamp()\"}),\" ko\\u2019p holatlarda ishlatilinishi mumkin, masalan \",(0,n.jsx)(i.strong,{children:\"tipografiya\"}),\" yoki \",(0,n.jsx)(i.strong,{children:\"margin, paddinglar\"}),\" uchun.\"]}),`\n`,(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.em,{children:\"Bugungi o\\u2019rganganlarimiz haqida batafsil ushbu\"}),\" \",(0,n.jsx)(i.a,{href:\"https://codepen.io/khaitbek/pen/XWPNQxB\",children:(0,n.jsx)(i.em,{children:\"havolada\"})}),\" \",(0,n.jsx)(i.em,{children:\"ma\\u2019lumot olishingiz mumkin. Bundan tashqari, o\\u2019zingiz mustaqil ravishda boshqa manbalardan ham izlanishingiz maqsadga muvofiq.\"})]})]})}function x(a={}){let{wrapper:i}=a.components||{};return i?(0,n.jsx)(i,Object.assign({},a,{children:(0,n.jsx)(s,a)})):s(a)}var f=x;return q(z);})();\n;return Component;"
        },
        "_id": "blog/modern-css-2023.mdx",
        "_raw": {
          "sourceFilePath": "blog/modern-css-2023.mdx",
          "sourceFileName": "modern-css-2023.mdx",
          "sourceFileDir": "blog",
          "contentType": "mdx",
          "flattenedPath": "blog/modern-css-2023"
        },
        "type": "Doc",
        "slug": "/blog/modern-css-2023",
        "slugAsParams": "modern-css-2023"
      },
      "documentHash": "1706094808313",
      "hasWarnings": false,
      "documentTypeName": "Doc"
    },
    "blog/pure-functions-in-js.mdx": {
      "document": {
        "title": "Javascriptda sof funksiyalar",
        "description": "Javascript dasturlash tilida sof funksiyalar yozishni o'rganamiz",
        "published": true,
        "categories": "Javascript",
        "body": {
          "raw": "\n# Javascriptda sof funksiyalar\n\n[](https://medium.com/@khaitbekdev?source=post_page-----f9818bd2220e--------------------------------)\n\n[Hayitbek Yusupov](https://medium.com/@khaitbekdev?source=post_page-----f9818bd2220e--------------------------------)\n\n2 min read\n\nNov 3, 2022\n\nSof funksiya— bir xil argumentlar berilganda doim bir xil natija qaytarib beruvchi funksiya hisoblanadi. Ya’ni funksiyaning argumentiga biz bir xil qiymat bersak, bizga ham doim bir xil natijani beradi. Sof funksiyalar faqatgina o’ziga argument sifatida berilgan qiymatlar bilangina ishlaydi. Funksiya o’zidan tashqaridagi hech qaysi narsaga ta’sir o’tkazmaydi.\n\n```\nconst sonlar = [1,2,3,4,5]console.log(sonlar) // [1,2,3,4,5]function arraydan_chop(array){\n    return array.pop()\n}arraydan_chop(sonlar)console.log(sonlar) // [1,2,3,4]\n```\n\nYuqoridagi kodga qaraymiz. Bizda `sonlar` nomli array bor va `arraydan_chop` nomli funksiya bor va bu funksiya shunchaki o’ziga argument sifatida berilgan arrayning oxiridan bitta element o’chiradi. Birinchi `console` ga arrayni chiqarganimizda `[1,2,3,4,5]` chiqqan bo’lsa, funksiyani chaqirib, unga **sonlar** nomli arrayni argument sifatida berganimizdan so’ng `console` ga arrayni chiqarganimizda esa `[1,2,3,4]` chiqdi. Ya’ni funksiya bizning global arrayimizni o’zgartirib yubordi. Sof funksiyalar esa bunday tartibda ishlamaydi. Endi `arraydan_chop` funksiyamizni sof funksiya ko’rinishiga keltiramiz.\n\n```\nconst sonlar = [1,2,3,4,5]console.log(sonlar) // [1,2,3,4,5]function arraydan_chop(array){\n    const copyArray = [...array]\n    copyArray.pop()\n    console.log(copyArray) // [1,2,3,4]\n}arraydan_chop(sonlar)console.log(sonlar) // [1,2,3,4,5]\n```\n\nBu gal esa bizning arrayimiz umuman o’zgarmadi. Funksiyani ishlatmasdan avval ham qiymati `[1,2,3,4,5]` edi, funksiyani ishlatgandan keyin ham qiymati o’zgarmadi. Bunga sabab esa biz `arraydan_chop` funksiyamizda birinchi bo’lib funksiyaga argument sifatida berilgan arraydan o’zimizga nusxa oldik. Keyin nusxa olingan arrayning oxiridan bitta element o’chirdik va nusxa olingan arrayni `console` ga chiqarganimizda natija `[1,2,3,4]`bo’ldi. Ya’ni, bizning funksiyamiz o’zidan tashqaridagi hech qanday elementni o’zgartirmadi. Endi sof funksiyalar har doim bir xil argumentlar uchun bir xil qiymat qaytarishini misolda ko’ramiz.\n\n```\nconst sonlar = [1,2,3,4,5]function arraydan_chop(array){\n    const copyArray = [...array]\n    copyArray.pop()\n    console.log(copyArray)\n}\narraydan_chop(sonlar) // [1,2,3,4]\narraydan_chop(sonlar) // [1,2,3,4]\narraydan_chop(sonlar) // [1,2,3,4]\narraydan_chop(sonlar) // [1,2,3,4]\narraydan_chop(sonlar) // [1,2,3,4]\n```\n\nEndi bu galgi kodimizda funksiyani 5 marta ishlattik, lekin bir xil qiymat `console` ga chiqaverdi. Bunga sabab esa bizning funksiyamiz hecn qanday global o’zgaruvchini o’zgartirmadi, aksincha har gal o’ziga argument sifatida berilgan arraydan nusxa oldi va **nusxa olingan arrayni** o’zgartirdi. Bu esa sof funksiyaning yana bir afzalliklaridan biri hisoblanadi.\n\n# Sof funksiyalarning afzalligi\n\nSof funksiyalarning afzalligi shundaki, sof funksiyalar o’zidan tashqaridagi narsalarni umuman o’zgartirmaydi va har doim bir xil argument berilsa bir xil natija qaytaradi. Bu afzalliklar bizning kodimizni tartibini saqlashga yordam beradi. Kodimizda hech narsa birdaniga o’zgarib ketib qolmaydi, balki faqatgina funksiyani ichida o’zgaradi.\n\n# Sof funksiyalarning salbiy tomonlari\n\nAgar siz yozayotgan funksiya ma’lumotlar bazasidan qandaydir ma’lumotni o’chirib yuborishi, o’zgartirib yuborishi yoki shunga o’xshash ishlarni bajarishi shart bo’lsa, bu holatlarda sof funksiya ishlatilinmaydi. Chunki sof funksiya o’zidan tashqaridagi hech narsaga ta’sir o’tkazmaydi. Faqatgina o’ziga berilgan argumentlar bilan ishlaydi.\n",
          "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var b=(n,a)=>()=>(a||n((a={exports:{}}).exports,a),a.exports),f=(n,a)=>{for(var r in a)s(n,r,{get:a[r],enumerable:!0})},e=(n,a,r,l)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let o of g(a))!m.call(n,o)&&o!==r&&s(n,o,{get:()=>a[o],enumerable:!(l=y(a,o))||l.enumerable});return n};var k=(n,a,r)=>(r=n!=null?h(u(n)):{},e(a||!n||!n.__esModule?s(r,\"default\",{value:n,enumerable:!0}):r,n)),p=n=>e(s({},\"__esModule\",{value:!0}),n);var c=b((j,d)=>{d.exports=_jsx_runtime});var _={};f(_,{default:()=>x,frontmatter:()=>z});var i=k(c()),z={title:\"Javascriptda sof funksiyalar\",description:\"Javascript dasturlash tilida sof funksiyalar yozishni o'rganamiz\",categories:\"Javascript\"};function t(n){let a=Object.assign({h1:\"h1\",a:\"a\",span:\"span\",p:\"p\",pre:\"pre\",code:\"code\",strong:\"strong\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a.h1,{id:\"javascriptda-sof-funksiyalar\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#javascriptda-sof-funksiyalar\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Javascriptda sof funksiyalar\"]}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----f9818bd2220e--------------------------------\"})}),`\n`,(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:\"https://medium.com/@khaitbekdev?source=post_page-----f9818bd2220e--------------------------------\",children:\"Hayitbek Yusupov\"})}),`\n`,(0,i.jsx)(a.p,{children:\"2 min read\"}),`\n`,(0,i.jsx)(a.p,{children:\"Nov 3, 2022\"}),`\n`,(0,i.jsx)(a.p,{children:\"Sof funksiya\\u2014 bir xil argumentlar berilganda doim bir xil natija qaytarib beruvchi funksiya hisoblanadi. Ya\\u2019ni funksiyaning argumentiga biz bir xil qiymat bersak, bizga ham doim bir xil natijani beradi. Sof funksiyalar faqatgina o\\u2019ziga argument sifatida berilgan qiymatlar bilangina ishlaydi. Funksiya o\\u2019zidan tashqaridagi hech qaysi narsaga ta\\u2019sir o\\u2019tkazmaydi.\"}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`const sonlar = [1,2,3,4,5]console.log(sonlar) // [1,2,3,4,5]function arraydan_chop(array){\n    return array.pop()\n}arraydan_chop(sonlar)console.log(sonlar) // [1,2,3,4]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Yuqoridagi kodga qaraymiz. Bizda \",(0,i.jsx)(a.code,{children:\"sonlar\"}),\" nomli array bor va \",(0,i.jsx)(a.code,{children:\"arraydan_chop\"}),\" nomli funksiya bor va bu funksiya shunchaki o\\u2019ziga argument sifatida berilgan arrayning oxiridan bitta element o\\u2019chiradi. Birinchi \",(0,i.jsx)(a.code,{children:\"console\"}),\" ga arrayni chiqarganimizda \",(0,i.jsx)(a.code,{children:\"[1,2,3,4,5]\"}),\" chiqqan bo\\u2019lsa, funksiyani chaqirib, unga \",(0,i.jsx)(a.strong,{children:\"sonlar\"}),\" nomli arrayni argument sifatida berganimizdan so\\u2019ng \",(0,i.jsx)(a.code,{children:\"console\"}),\" ga arrayni chiqarganimizda esa \",(0,i.jsx)(a.code,{children:\"[1,2,3,4]\"}),\" chiqdi. Ya\\u2019ni funksiya bizning global arrayimizni o\\u2019zgartirib yubordi. Sof funksiyalar esa bunday tartibda ishlamaydi. Endi \",(0,i.jsx)(a.code,{children:\"arraydan_chop\"}),\" funksiyamizni sof funksiya ko\\u2019rinishiga keltiramiz.\"]}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`const sonlar = [1,2,3,4,5]console.log(sonlar) // [1,2,3,4,5]function arraydan_chop(array){\n    const copyArray = [...array]\n    copyArray.pop()\n    console.log(copyArray) // [1,2,3,4]\n}arraydan_chop(sonlar)console.log(sonlar) // [1,2,3,4,5]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Bu gal esa bizning arrayimiz umuman o\\u2019zgarmadi. Funksiyani ishlatmasdan avval ham qiymati \",(0,i.jsx)(a.code,{children:\"[1,2,3,4,5]\"}),\" edi, funksiyani ishlatgandan keyin ham qiymati o\\u2019zgarmadi. Bunga sabab esa biz \",(0,i.jsx)(a.code,{children:\"arraydan_chop\"}),\" funksiyamizda birinchi bo\\u2019lib funksiyaga argument sifatida berilgan arraydan o\\u2019zimizga nusxa oldik. Keyin nusxa olingan arrayning oxiridan bitta element o\\u2019chirdik va nusxa olingan arrayni \",(0,i.jsx)(a.code,{children:\"console\"}),\" ga chiqarganimizda natija \",(0,i.jsx)(a.code,{children:\"[1,2,3,4]\"}),\"bo\\u2019ldi. Ya\\u2019ni, bizning funksiyamiz o\\u2019zidan tashqaridagi hech qanday elementni o\\u2019zgartirmadi. Endi sof funksiyalar har doim bir xil argumentlar uchun bir xil qiymat qaytarishini misolda ko\\u2019ramiz.\"]}),`\n`,(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:`const sonlar = [1,2,3,4,5]function arraydan_chop(array){\n    const copyArray = [...array]\n    copyArray.pop()\n    console.log(copyArray)\n}\narraydan_chop(sonlar) // [1,2,3,4]\narraydan_chop(sonlar) // [1,2,3,4]\narraydan_chop(sonlar) // [1,2,3,4]\narraydan_chop(sonlar) // [1,2,3,4]\narraydan_chop(sonlar) // [1,2,3,4]\n`})}),`\n`,(0,i.jsxs)(a.p,{children:[\"Endi bu galgi kodimizda funksiyani 5 marta ishlattik, lekin bir xil qiymat \",(0,i.jsx)(a.code,{children:\"console\"}),\" ga chiqaverdi. Bunga sabab esa bizning funksiyamiz hecn qanday global o\\u2019zgaruvchini o\\u2019zgartirmadi, aksincha har gal o\\u2019ziga argument sifatida berilgan arraydan nusxa oldi va \",(0,i.jsx)(a.strong,{children:\"nusxa olingan arrayni\"}),\" o\\u2019zgartirdi. Bu esa sof funksiyaning yana bir afzalliklaridan biri hisoblanadi.\"]}),`\n`,(0,i.jsxs)(a.h1,{id:\"sof-funksiyalarning-afzalligi\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#sof-funksiyalarning-afzalligi\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Sof funksiyalarning afzalligi\"]}),`\n`,(0,i.jsx)(a.p,{children:\"Sof funksiyalarning afzalligi shundaki, sof funksiyalar o\\u2019zidan tashqaridagi narsalarni umuman o\\u2019zgartirmaydi va har doim bir xil argument berilsa bir xil natija qaytaradi. Bu afzalliklar bizning kodimizni tartibini saqlashga yordam beradi. Kodimizda hech narsa birdaniga o\\u2019zgarib ketib qolmaydi, balki faqatgina funksiyani ichida o\\u2019zgaradi.\"}),`\n`,(0,i.jsxs)(a.h1,{id:\"sof-funksiyalarning-salbiy-tomonlari\",children:[(0,i.jsx)(a.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#sof-funksiyalarning-salbiy-tomonlari\",children:(0,i.jsx)(a.span,{className:\"icon icon-link\"})}),\"Sof funksiyalarning salbiy tomonlari\"]}),`\n`,(0,i.jsx)(a.p,{children:\"Agar siz yozayotgan funksiya ma\\u2019lumotlar bazasidan qandaydir ma\\u2019lumotni o\\u2019chirib yuborishi, o\\u2019zgartirib yuborishi yoki shunga o\\u2019xshash ishlarni bajarishi shart bo\\u2019lsa, bu holatlarda sof funksiya ishlatilinmaydi. Chunki sof funksiya o\\u2019zidan tashqaridagi hech narsaga ta\\u2019sir o\\u2019tkazmaydi. Faqatgina o\\u2019ziga berilgan argumentlar bilan ishlaydi.\"})]})}function q(n={}){let{wrapper:a}=n.components||{};return a?(0,i.jsx)(a,Object.assign({},n,{children:(0,i.jsx)(t,n)})):t(n)}var x=q;return p(_);})();\n;return Component;"
        },
        "_id": "blog/pure-functions-in-js.mdx",
        "_raw": {
          "sourceFilePath": "blog/pure-functions-in-js.mdx",
          "sourceFileName": "pure-functions-in-js.mdx",
          "sourceFileDir": "blog",
          "contentType": "mdx",
          "flattenedPath": "blog/pure-functions-in-js"
        },
        "type": "Doc",
        "slug": "/blog/pure-functions-in-js",
        "slugAsParams": "pure-functions-in-js"
      },
      "documentHash": "1706095192280",
      "hasWarnings": false,
      "documentTypeName": "Doc"
    },
    "blog/should-you-learn-typescript.mdx": {
      "document": {
        "title": "Typescriptni o'rganish kerakmi?",
        "description": "Typescript so'nggi vaqtlarda ancha mashhurlikka erishdi. Siz uni o'rganishingiz kerakmi?",
        "published": true,
        "categories": "Typescript",
        "body": {
          "raw": "\n# Typescriptni o'rganish kerakmi?\n\n**Typescript** o'zi nima? **Typescript** dasturlash tili hisoblanib, **Javasript** dasturlash tilining **ustiga qurilgan** Javascript superseti hisoblanadi. Typescriptda Javascript sintaksisi orqali **qat'iy tiplarga asoslangan** dasturlash tilida kod yozish imkoniyatiga ega bo'lasiz.\n\n## Typescriptni qayerlarda ishlatish mumkin?\n\n**Typescript** Javascript qayerda run bo'lsa, o'sha yerda run bo'la oladi:\n\n- Browserda\n- NodeJS\n- va boshqa Javascript run bo'ladigan joylarda **Typescript**ni ishlatish mumkin.\n\n## Nega aynan Typescript?\n\nKeling endi hozirgi kunda nega ko'pchilik **Typescript** ni ishlatayotganini ko'rib chiqaylik:\n\n- Eng birinchi sabab, kelib chiqishi mumkin bo'lgan **xatolar (buglar)** sonini kamaytirish. **Typescript** kod yozish orqali siz Javascriptda kod yozganingizga qaraganda ancha-muncha kam xatolarga yo'liqasiz. Masalan [Airbnb](https://www.airbnb.com/) Javascriptdan Typescriptga o'tish orqali Javascriptda duch kelingan kamchiliklarning qariyb 38% ini bartaraf etgan. Typescript orqali siz productionda foydalanuvchilar duch kelishi mumkin bo'lgan potensial **xatolar (buglar)ni** kod yozayotgan paytingizni o'zida oldini olishingiz mumkin.\n- **Typescript** sizga kodingizni odatdagidanda ko'ra tezroq yozish imkonini beradi.\n- **Typescript** 2022-yilda **eng yaxshi 3 ta dasturlash tillari** qatoriga kirgan.\n- **Typescript** sizning kodingizni sifatini yanayam oshiradi. **Typescript**ni bilgan dasturchi **Typescript**ni bilmagan dasturchiga qaraganda **yaxshiroq** va **sifatliroq** kod yozadi. **Typescript**ni bilmagan dasturchi sifatsiz kod yozadi deyishdan yiroqmiz, biroq **Typescript** sizning bilimlaringizni yuqoriroq darajaga olib chiqa oladi.\n- Hozirda **Typescriptga** bo'lgan **talab** oshib bormoqda. **Typescript**ni bilmagan Javascript dasturchi hozirgi paytda ish topishi biroz mushkulroq. Chunki **Typescript** dasturlash olamida allaqachon katta obro'ga ega bo'lib ulgurdi.\n\n## Typescriptni hamma o'rganishi kerakmi?\n\n**Typescript**ni o'rganishingiz kerakmi yoki yo'qligi o'zingizga bog'liq. Agar siz Javascriptdan bilimlaringiz yaxshi ekanligiga ishonsangiz, bu holatda **Typescript**ni o'rganishni boshlayverishingiz kerak. Lekin agar siz hali Javascriptni o'zini to'liq o'rganib ulgurmagan bo'lsangiz, unda **Typescript**ni o'rganish uchun hali erta. Chunki **Typescript** Javascriptning ustiga qurilgan dasturlash tili. Javascriptdan bilimlaringiz yetarli emas bo'lsa, **Typescript**ni o'rganish sizga faqat zarar olib keladi.\n\n## Typescriptni o'rganishingizdan oldin muhim maslahatlar...\n\n**Typescript** ni ilk o'rganish jarayoni biroz mushkul kechishi mumkin, chunki siz **Typescript** da oddiy, normal Javascript kod yozolmaysiz. Kodingiz errorlarga to'lib ketadi.\n\n![Kodingiz xatolarga to'lib ketadi](https://devs.lol/uploads/2021/11/meme-dev-humor-fixing-typescript-errors-with-any-178.jpg)\n\nYana bir muhim jihat shundaki, **Typescriptni** o'rganish jarayonida ba'zi dasturchilar Javascriptda yozilgan loyihalarni olishadi va **Typescriptga** o'girmoqchi bo'lishadi va o'zlarini o'zlari o'qqa cho'qqa urishadi...\n\n![](https://devs.lol/uploads/2022/07/meme-dev-humor-after-you-migrate-to-typescript-317.jpg)\n\nAynan mana shu pallada ular **Typescriptni** o'rganishdan voz kechishadi. **Typescriptni** o'rganmoqchimisiz, Javascriptda yozilgan loyihalaringizni **Typescriptga** o'giraman deb hamma **.js** fayllarni **.ts** ga o'girish noto'g'ri. **Typescriptda** loyiha qilmoqchimisiz, unda 0 dan boshlang shu loyihani. 0 dan to'liq **Typescriptda** ko'taring loyihani.\n\n![Aynan mana shu pallada, ular **Typescript**ni o'rganishdan voz kechishadi](https://res.cloudinary.com/practicaldev/image/fetch/s--Tyo8_V2R--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdyo2ubjrh5fnd03t3qy.png)\n\nBiroq, bu hali boshlanishi. Ortga bir marta yiqilish, bu oldinga ikki marta sakrash uchun imkon deganlaridek, **Typescript**da kod yozishni boshlaganingizda siz duch keladigan bir dunyo xatolar kelajakda sizga katta foyda olib keladi. Xatolar qilavergach, tajribangiz oshadi va kamroq xato qilishga o'tasiz. Keyin esa, oldingidan ancha **tezroq**, **yaxshiroq** va **samarali** kod yozishni boshlaganingizni tushunib yetasiz.\n\n## Typescriptni qayerdan o'rgangan ma'qul?\n\n- [Typescript rasmiy saytidan](https://www.typescriptlang.org/)\n- [Typescript Handbook](https://www.typescriptlang.org/)\n- [devdocs.io saytidan](https://devdocs.io/typescript/)\n- [Youtube](https://youtube.com)\n- [Google](https://google.com)\n",
          "code": "var Component=(()=>{var d=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var u=(n,i)=>()=>(i||n((i={exports:{}}).exports,i),i.exports),k=(n,i)=>{for(var r in i)l(n,r,{get:i[r],enumerable:!0})},e=(n,i,r,o)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let s of p(i))!m.call(n,s)&&s!==r&&l(n,s,{get:()=>i[s],enumerable:!(o=g(i,s))||o.enumerable});return n};var b=(n,i,r)=>(r=n!=null?d(y(n)):{},e(i||!n||!n.__esModule?l(r,\"default\",{value:n,enumerable:!0}):r,n)),z=n=>e(l({},\"__esModule\",{value:!0}),n);var h=u((j,t)=>{t.exports=_jsx_runtime});var f={};k(f,{default:()=>v,frontmatter:()=>q});var a=b(h()),q={title:\"Typescriptni o'rganish kerakmi?\",description:\"Typescript so'nggi vaqtlarda ancha mashhurlikka erishdi. Siz uni o'rganishingiz kerakmi?\",categories:\"Typescript\"};function c(n){let i=Object.assign({h1:\"h1\",a:\"a\",span:\"span\",p:\"p\",strong:\"strong\",h2:\"h2\",ul:\"ul\",li:\"li\",img:\"img\"},n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(i.h1,{id:\"typescriptni-organish-kerakmi\",children:[(0,a.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typescriptni-organish-kerakmi\",children:(0,a.jsx)(i.span,{className:\"icon icon-link\"})}),\"Typescriptni o'rganish kerakmi?\"]}),`\n`,(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" o'zi nima? \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" dasturlash tili hisoblanib, \",(0,a.jsx)(i.strong,{children:\"Javasript\"}),\" dasturlash tilining \",(0,a.jsx)(i.strong,{children:\"ustiga qurilgan\"}),\" Javascript superseti hisoblanadi. Typescriptda Javascript sintaksisi orqali \",(0,a.jsx)(i.strong,{children:\"qat'iy tiplarga asoslangan\"}),\" dasturlash tilida kod yozish imkoniyatiga ega bo'lasiz.\"]}),`\n`,(0,a.jsxs)(i.h2,{id:\"typescriptni-qayerlarda-ishlatish-mumkin\",children:[(0,a.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typescriptni-qayerlarda-ishlatish-mumkin\",children:(0,a.jsx)(i.span,{className:\"icon icon-link\"})}),\"Typescriptni qayerlarda ishlatish mumkin?\"]}),`\n`,(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" Javascript qayerda run bo'lsa, o'sha yerda run bo'la oladi:\"]}),`\n`,(0,a.jsxs)(i.ul,{children:[`\n`,(0,a.jsx)(i.li,{children:\"Browserda\"}),`\n`,(0,a.jsx)(i.li,{children:\"NodeJS\"}),`\n`,(0,a.jsxs)(i.li,{children:[\"va boshqa Javascript run bo'ladigan joylarda \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni ishlatish mumkin.\"]}),`\n`]}),`\n`,(0,a.jsxs)(i.h2,{id:\"nega-aynan-typescript\",children:[(0,a.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#nega-aynan-typescript\",children:(0,a.jsx)(i.span,{className:\"icon icon-link\"})}),\"Nega aynan Typescript?\"]}),`\n`,(0,a.jsxs)(i.p,{children:[\"Keling endi hozirgi kunda nega ko'pchilik \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" ni ishlatayotganini ko'rib chiqaylik:\"]}),`\n`,(0,a.jsxs)(i.ul,{children:[`\n`,(0,a.jsxs)(i.li,{children:[\"Eng birinchi sabab, kelib chiqishi mumkin bo'lgan \",(0,a.jsx)(i.strong,{children:\"xatolar (buglar)\"}),\" sonini kamaytirish. \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" kod yozish orqali siz Javascriptda kod yozganingizga qaraganda ancha-muncha kam xatolarga yo'liqasiz. Masalan \",(0,a.jsx)(i.a,{href:\"https://www.airbnb.com/\",children:\"Airbnb\"}),\" Javascriptdan Typescriptga o'tish orqali Javascriptda duch kelingan kamchiliklarning qariyb 38% ini bartaraf etgan. Typescript orqali siz productionda foydalanuvchilar duch kelishi mumkin bo'lgan potensial \",(0,a.jsx)(i.strong,{children:\"xatolar (buglar)ni\"}),\" kod yozayotgan paytingizni o'zida oldini olishingiz mumkin.\"]}),`\n`,(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" sizga kodingizni odatdagidanda ko'ra tezroq yozish imkonini beradi.\"]}),`\n`,(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" 2022-yilda \",(0,a.jsx)(i.strong,{children:\"eng yaxshi 3 ta dasturlash tillari\"}),\" qatoriga kirgan.\"]}),`\n`,(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" sizning kodingizni sifatini yanayam oshiradi. \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni bilgan dasturchi \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni bilmagan dasturchiga qaraganda \",(0,a.jsx)(i.strong,{children:\"yaxshiroq\"}),\" va \",(0,a.jsx)(i.strong,{children:\"sifatliroq\"}),\" kod yozadi. \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni bilmagan dasturchi sifatsiz kod yozadi deyishdan yiroqmiz, biroq \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" sizning bilimlaringizni yuqoriroq darajaga olib chiqa oladi.\"]}),`\n`,(0,a.jsxs)(i.li,{children:[\"Hozirda \",(0,a.jsx)(i.strong,{children:\"Typescriptga\"}),\" bo'lgan \",(0,a.jsx)(i.strong,{children:\"talab\"}),\" oshib bormoqda. \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni bilmagan Javascript dasturchi hozirgi paytda ish topishi biroz mushkulroq. Chunki \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" dasturlash olamida allaqachon katta obro'ga ega bo'lib ulgurdi.\"]}),`\n`]}),`\n`,(0,a.jsxs)(i.h2,{id:\"typescriptni-hamma-organishi-kerakmi\",children:[(0,a.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typescriptni-hamma-organishi-kerakmi\",children:(0,a.jsx)(i.span,{className:\"icon icon-link\"})}),\"Typescriptni hamma o'rganishi kerakmi?\"]}),`\n`,(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni o'rganishingiz kerakmi yoki yo'qligi o'zingizga bog'liq. Agar siz Javascriptdan bilimlaringiz yaxshi ekanligiga ishonsangiz, bu holatda \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni o'rganishni boshlayverishingiz kerak. Lekin agar siz hali Javascriptni o'zini to'liq o'rganib ulgurmagan bo'lsangiz, unda \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni o'rganish uchun hali erta. Chunki \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" Javascriptning ustiga qurilgan dasturlash tili. Javascriptdan bilimlaringiz yetarli emas bo'lsa, \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"ni o'rganish sizga faqat zarar olib keladi.\"]}),`\n`,(0,a.jsxs)(i.h2,{id:\"typescriptni-organishingizdan-oldin-muhim-maslahatlar\",children:[(0,a.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typescriptni-organishingizdan-oldin-muhim-maslahatlar\",children:(0,a.jsx)(i.span,{className:\"icon icon-link\"})}),\"Typescriptni o'rganishingizdan oldin muhim maslahatlar...\"]}),`\n`,(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" ni ilk o'rganish jarayoni biroz mushkul kechishi mumkin, chunki siz \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\" da oddiy, normal Javascript kod yozolmaysiz. Kodingiz errorlarga to'lib ketadi.\"]}),`\n`,(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:\"https://devs.lol/uploads/2021/11/meme-dev-humor-fixing-typescript-errors-with-any-178.jpg\",alt:\"Kodingiz xatolarga to'lib ketadi\"})}),`\n`,(0,a.jsxs)(i.p,{children:[\"Yana bir muhim jihat shundaki, \",(0,a.jsx)(i.strong,{children:\"Typescriptni\"}),\" o'rganish jarayonida ba'zi dasturchilar Javascriptda yozilgan loyihalarni olishadi va \",(0,a.jsx)(i.strong,{children:\"Typescriptga\"}),\" o'girmoqchi bo'lishadi va o'zlarini o'zlari o'qqa cho'qqa urishadi...\"]}),`\n`,(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:\"https://devs.lol/uploads/2022/07/meme-dev-humor-after-you-migrate-to-typescript-317.jpg\",alt:\"\"})}),`\n`,(0,a.jsxs)(i.p,{children:[\"Aynan mana shu pallada ular \",(0,a.jsx)(i.strong,{children:\"Typescriptni\"}),\" o'rganishdan voz kechishadi. \",(0,a.jsx)(i.strong,{children:\"Typescriptni\"}),\" o'rganmoqchimisiz, Javascriptda yozilgan loyihalaringizni \",(0,a.jsx)(i.strong,{children:\"Typescriptga\"}),\" o'giraman deb hamma \",(0,a.jsx)(i.strong,{children:\".js\"}),\" fayllarni \",(0,a.jsx)(i.strong,{children:\".ts\"}),\" ga o'girish noto'g'ri. \",(0,a.jsx)(i.strong,{children:\"Typescriptda\"}),\" loyiha qilmoqchimisiz, unda 0 dan boshlang shu loyihani. 0 dan to'liq \",(0,a.jsx)(i.strong,{children:\"Typescriptda\"}),\" ko'taring loyihani.\"]}),`\n`,(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:\"https://res.cloudinary.com/practicaldev/image/fetch/s--Tyo8_V2R--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdyo2ubjrh5fnd03t3qy.png\",alt:\"Aynan mana shu pallada, ular Typescriptni o'rganishdan voz kechishadi\"})}),`\n`,(0,a.jsxs)(i.p,{children:[\"Biroq, bu hali boshlanishi. Ortga bir marta yiqilish, bu oldinga ikki marta sakrash uchun imkon deganlaridek, \",(0,a.jsx)(i.strong,{children:\"Typescript\"}),\"da kod yozishni boshlaganingizda siz duch keladigan bir dunyo xatolar kelajakda sizga katta foyda olib keladi. Xatolar qilavergach, tajribangiz oshadi va kamroq xato qilishga o'tasiz. Keyin esa, oldingidan ancha \",(0,a.jsx)(i.strong,{children:\"tezroq\"}),\", \",(0,a.jsx)(i.strong,{children:\"yaxshiroq\"}),\" va \",(0,a.jsx)(i.strong,{children:\"samarali\"}),\" kod yozishni boshlaganingizni tushunib yetasiz.\"]}),`\n`,(0,a.jsxs)(i.h2,{id:\"typescriptni-qayerdan-organgan-maqul\",children:[(0,a.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typescriptni-qayerdan-organgan-maqul\",children:(0,a.jsx)(i.span,{className:\"icon icon-link\"})}),\"Typescriptni qayerdan o'rgangan ma'qul?\"]}),`\n`,(0,a.jsxs)(i.ul,{children:[`\n`,(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:\"https://www.typescriptlang.org/\",children:\"Typescript rasmiy saytidan\"})}),`\n`,(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:\"https://www.typescriptlang.org/\",children:\"Typescript Handbook\"})}),`\n`,(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:\"https://devdocs.io/typescript/\",children:\"devdocs.io saytidan\"})}),`\n`,(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:\"https://youtube.com\",children:\"Youtube\"})}),`\n`,(0,a.jsx)(i.li,{children:(0,a.jsx)(i.a,{href:\"https://google.com\",children:\"Google\"})}),`\n`]})]})}function T(n={}){let{wrapper:i}=n.components||{};return i?(0,a.jsx)(i,Object.assign({},n,{children:(0,a.jsx)(c,n)})):c(n)}var v=T;return z(f);})();\n;return Component;"
        },
        "_id": "blog/should-you-learn-typescript.mdx",
        "_raw": {
          "sourceFilePath": "blog/should-you-learn-typescript.mdx",
          "sourceFileName": "should-you-learn-typescript.mdx",
          "sourceFileDir": "blog",
          "contentType": "mdx",
          "flattenedPath": "blog/should-you-learn-typescript"
        },
        "type": "Doc",
        "slug": "/blog/should-you-learn-typescript",
        "slugAsParams": "should-you-learn-typescript"
      },
      "documentHash": "1706002153591",
      "hasWarnings": false,
      "documentTypeName": "Doc"
    },
    "blog/tanstack-router.mdx": {
      "document": {
        "title": "Tanstack Router",
        "description": "React ilovalarimizda type-safe routing ishlatishni vanihoyat iloji bor",
        "published": true,
        "categories": "React,Typescript",
        "body": {
          "raw": "\n**Typescript** hozirgi kunda jadal rivojlanib bormoqda va dasturchilar uchun bir qancha qulayliklar berib kelmoqda. **Typescript** yordamida biz **qat’iy tiplarga asoslangan tizimda** kod yozish orqali o’z ilovalarimizni tezroq, samaraliroq yaratishga erishdik. Typescript **React** bilan juda ajoyib ishlaydi va men ancha muddatdan beri **React** ilovalarimni Typescriptsiz tasavvur qila olmas edim. Lekin React ilovalarimning shunday bir qismi borki, u qismi hech qachon **Typescript** ni qo’llab-quvvatlamagan, har doim kemtik bo’lib qolavergan. U ham bo’lsa, **routing** qismi. Biz hech qachon **Typescript** ilovamizdagi routelarni **boshqarish, nazorat qilish** imkoniga ega bo’lmaganmiz, balkim bu hech kimning hayoliga ham kelmagan. Ammo, [**Tanstack Router**](https://tanstack.com/router/v1) mana shu kemtik joyni to’ldirish uchun eng katta qadamlardan biri bo’ldi.\n\n![](https://miro.medium.com/v2/resize:fit:875/0*NwEly64rEq5KkqBX)\n\n[**Tanstack Router**](https://tanstack.com/router/v1) orqali endi biz ilovamizdagi **route** larni **Typescript** yordamida yozish imkoniga egamiz. Agar hech narsa tushunmagan bo’lsangiz pastdagi rasmga yaxshilab qarang:\n\n![](https://ik.imagekit.io/khaitbek/blog/ts-router-intro/image.png?updatedAt=1702958474379)\n\nYuqoridagi rasmga yaxshilab e'tibor berishingizni so'rayman. [**Tanstack Router**](https://tanstack.com/router/v1) Biz endi **React** ilovalarimizdagi **routelarni boshqara olamiz**, chunki [**Tanstack Router**](https://tanstack.com/router/v1) bizga buni imkonini beradi. Ilovangizda qaysi sahifalar bor, har bir sahifaga qandaydir **query** yoki **search parametrlar** kerakligini o’zi sizga aytib turadi.\n\nXo’sh, keling endi [**Tanstack Router**](https://tanstack.com/router/v1) ni qanday ishlatishni ko’ramiz. [**Tanstack Router**](https://tanstack.com/router/v1) hozirda **beta** versiyada va yaqin kunlarda ilk versiyasi chiqarilishi kutilmoqda. [**Tanstack Router**](https://tanstack.com/router/v1) ni **React** ilovamizga quyidagi command orqali o'rnatishimiz mumkin:\n\n`pnpm install @tanstack/react-router@beta`\n\nMen **pnpm** package managerni ishlataman, siz o'zingizga mos holatda **npm**, **yarn** yoki **bun** ishlatishingiz mumkin.\n\n```\n\nimport { RootRoute, Route, Router } from \"@tanstack/router\"\nimport { RootLayout } from \"./layouts\"\nimport Home from \"./pages/Home\"\nimport Users from \"./pages/Users\"\nimport Posts from \"./pages/Posts\"\n\nconst indexRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: \"/\",\n  component: Home,\n})\nconst userRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: \"/users\",\n  component: Users,\n})\nconst postsRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: \"/posts\",\n  component: Posts,\n})\n\n// create a route tree\nconst routeTree = rootRoute.addChildren([indexRoute, userRoute, postsRoute])\n\n// create router\nconst router = new Router({ routeTree })\n\n// register your router for type-safety magic\ndeclare module \"@tanstack/router\" {\n  interface Register {\n  router: typeof router\n  }\n}\n\nexport default router\n```\n\nDemak, biz qilishimiz kerak bo’lgan ish asosan 6 qismga bo’linadi:\n\n- **Root route** yaratish (ilovamizdagi barcha routelarni o’rab turuvchi route)\n- Qolgan **route** lar. Ilovangizdagi sahifalarni birma-bir e’lon qilib ketaverasiz\n- Barcha routelardan **route tree** yaratasiz, ya’ni ularni **bir-biri bilan bog’laysiz** va eng yuqorida e’lon qilingan **root routega** qolgan routelarni qo’shib chiqasiz.\n- Eng muhim qismi esa mana shu:\n\n```\n\ndeclare module \"@tanstack/router\" {\ninterface Register {\n  router: typeof router;\n  }\n}\n\n// bu kod yozilmasa, Tanstack Routerni foydasi umuman bilinmaydi\n// bu kod bizning routerni Typecript compiler tushunishi, ilovamizdagi sahifalarni tanib olishiga xizmat qiladi\n```\n\n- **App** componentimizni **RouterProvider** bilan o’raymiz\n\n```\n\nimport { RouterProvider } from \"@tanstack/router\"\nimport router from \"./router\"\n\nexport default function App() {\n  return (\n    <RouterProvider router={router} />\n  )\n}\n```\n\n- Navbar component yaratish va [**Tanstack Router**](https://tanstack.com/router/v1) ning **Link** componentini ishlatish.\n  [**Tanstack Router**](https://tanstack.com/router/v1) o'zining **built-in Link componentini** bilan keladi. Bu componentni siz ilovaning qaysi qismida **linklar** kerak bo'lsa ishlatishingiz mumkin va aynan shu component orqali siz [**Tanstack Router**](https://tanstack.com/router/v1) ning haqiqiy foydalaridan birini ko'rasiz\n\n```\nimport { Link } from \"@tanstack/router\";\nexport function Navbar() {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/posts\">Posts</Link>\n        </li>\n        <li>\n          <Link to=\"/users\">Users</Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n```\n\nKo’rib turganingizdek, biz ilovamizdagi barcha route larni Typescript orqali yozishga erishdik. Bu hali ozginagina kirish edi. Tanstack Router juda ko’p ishlarni bajaradi:\n\n<ul>\n\t<li> Devtools ✅</li>\n\t<li> Type safe search params ✅</li>\n</ul>\n\n## Xayr, React Router DOM?\n\nMen [**Tanstack Router**](https://tanstack.com/router/v1) stabil versiyada chiqishini intizorlik bilan kutilmoqda va stabil versiyasi chiqishi bilan **React Router DOM**ni ortda qoldirishi kutilmoqda. **React Router DOM** yaxshiroq raqobat taklif qilishini kutib qolamiz\n",
          "code": "var Component=(()=>{var d=Object.create;var e=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var k=(r,i)=>()=>(i||r((i={exports:{}}).exports,i),i.exports),b=(r,i)=>{for(var a in i)e(r,a,{get:i[a],enumerable:!0})},s=(r,i,a,o)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let t of m(i))!p.call(r,t)&&t!==a&&e(r,t,{get:()=>i[t],enumerable:!(o=u(i,t))||o.enumerable});return r};var y=(r,i,a)=>(a=r!=null?d(g(r)):{},s(i||!r||!r.__esModule?e(a,\"default\",{value:r,enumerable:!0}):a,r)),z=r=>s(e({},\"__esModule\",{value:!0}),r);var c=k((x,l)=>{l.exports=_jsx_runtime});var f={};b(f,{default:()=>v,frontmatter:()=>q});var n=y(c()),q={title:\"Tanstack Router\",description:\"React ilovalarimizda type-safe routing ishlatishni vanihoyat iloji bor\",categories:\"React,Typescript\"};function h(r){let i=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",img:\"img\",code:\"code\",pre:\"pre\",ul:\"ul\",li:\"li\",h2:\"h2\",span:\"span\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:\"Typescript\"}),\" hozirgi kunda jadal rivojlanib bormoqda va dasturchilar uchun bir qancha qulayliklar berib kelmoqda. \",(0,n.jsx)(i.strong,{children:\"Typescript\"}),\" yordamida biz \",(0,n.jsx)(i.strong,{children:\"qat\\u2019iy tiplarga asoslangan tizimda\"}),\" kod yozish orqali o\\u2019z ilovalarimizni tezroq, samaraliroq yaratishga erishdik. Typescript \",(0,n.jsx)(i.strong,{children:\"React\"}),\" bilan juda ajoyib ishlaydi va men ancha muddatdan beri \",(0,n.jsx)(i.strong,{children:\"React\"}),\" ilovalarimni Typescriptsiz tasavvur qila olmas edim. Lekin React ilovalarimning shunday bir qismi borki, u qismi hech qachon \",(0,n.jsx)(i.strong,{children:\"Typescript\"}),\" ni qo\\u2019llab-quvvatlamagan, har doim kemtik bo\\u2019lib qolavergan. U ham bo\\u2019lsa, \",(0,n.jsx)(i.strong,{children:\"routing\"}),\" qismi. Biz hech qachon \",(0,n.jsx)(i.strong,{children:\"Typescript\"}),\" ilovamizdagi routelarni \",(0,n.jsx)(i.strong,{children:\"boshqarish, nazorat qilish\"}),\" imkoniga ega bo\\u2019lmaganmiz, balkim bu hech kimning hayoliga ham kelmagan. Ammo, \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" mana shu kemtik joyni to\\u2019ldirish uchun eng katta qadamlardan biri bo\\u2019ldi.\"]}),`\n`,(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{src:\"https://miro.medium.com/v2/resize:fit:875/0*NwEly64rEq5KkqBX\",alt:\"\"})}),`\n`,(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" orqali endi biz ilovamizdagi \",(0,n.jsx)(i.strong,{children:\"route\"}),\" larni \",(0,n.jsx)(i.strong,{children:\"Typescript\"}),\" yordamida yozish imkoniga egamiz. Agar hech narsa tushunmagan bo\\u2019lsangiz pastdagi rasmga yaxshilab qarang:\"]}),`\n`,(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{src:\"https://ik.imagekit.io/khaitbek/blog/ts-router-intro/image.png?updatedAt=1702958474379\",alt:\"\"})}),`\n`,(0,n.jsxs)(i.p,{children:[\"Yuqoridagi rasmga yaxshilab e'tibor berishingizni so'rayman. \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" Biz endi \",(0,n.jsx)(i.strong,{children:\"React\"}),\" ilovalarimizdagi \",(0,n.jsx)(i.strong,{children:\"routelarni boshqara olamiz\"}),\", chunki \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" bizga buni imkonini beradi. Ilovangizda qaysi sahifalar bor, har bir sahifaga qandaydir \",(0,n.jsx)(i.strong,{children:\"query\"}),\" yoki \",(0,n.jsx)(i.strong,{children:\"search parametrlar\"}),\" kerakligini o\\u2019zi sizga aytib turadi.\"]}),`\n`,(0,n.jsxs)(i.p,{children:[\"Xo\\u2019sh, keling endi \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" ni qanday ishlatishni ko\\u2019ramiz. \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" hozirda \",(0,n.jsx)(i.strong,{children:\"beta\"}),\" versiyada va yaqin kunlarda ilk versiyasi chiqarilishi kutilmoqda. \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" ni \",(0,n.jsx)(i.strong,{children:\"React\"}),\" ilovamizga quyidagi command orqali o'rnatishimiz mumkin:\"]}),`\n`,(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:\"pnpm install @tanstack/react-router@beta\"})}),`\n`,(0,n.jsxs)(i.p,{children:[\"Men \",(0,n.jsx)(i.strong,{children:\"pnpm\"}),\" package managerni ishlataman, siz o'zingizga mos holatda \",(0,n.jsx)(i.strong,{children:\"npm\"}),\", \",(0,n.jsx)(i.strong,{children:\"yarn\"}),\" yoki \",(0,n.jsx)(i.strong,{children:\"bun\"}),\" ishlatishingiz mumkin.\"]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`\nimport { RootRoute, Route, Router } from \"@tanstack/router\"\nimport { RootLayout } from \"./layouts\"\nimport Home from \"./pages/Home\"\nimport Users from \"./pages/Users\"\nimport Posts from \"./pages/Posts\"\n\nconst indexRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: \"/\",\n  component: Home,\n})\nconst userRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: \"/users\",\n  component: Users,\n})\nconst postsRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: \"/posts\",\n  component: Posts,\n})\n\n// create a route tree\nconst routeTree = rootRoute.addChildren([indexRoute, userRoute, postsRoute])\n\n// create router\nconst router = new Router({ routeTree })\n\n// register your router for type-safety magic\ndeclare module \"@tanstack/router\" {\n  interface Register {\n  router: typeof router\n  }\n}\n\nexport default router\n`})}),`\n`,(0,n.jsx)(i.p,{children:\"Demak, biz qilishimiz kerak bo\\u2019lgan ish asosan 6 qismga bo\\u2019linadi:\"}),`\n`,(0,n.jsxs)(i.ul,{children:[`\n`,(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:\"Root route\"}),\" yaratish (ilovamizdagi barcha routelarni o\\u2019rab turuvchi route)\"]}),`\n`,(0,n.jsxs)(i.li,{children:[\"Qolgan \",(0,n.jsx)(i.strong,{children:\"route\"}),\" lar. Ilovangizdagi sahifalarni birma-bir e\\u2019lon qilib ketaverasiz\"]}),`\n`,(0,n.jsxs)(i.li,{children:[\"Barcha routelardan \",(0,n.jsx)(i.strong,{children:\"route tree\"}),\" yaratasiz, ya\\u2019ni ularni \",(0,n.jsx)(i.strong,{children:\"bir-biri bilan bog\\u2019laysiz\"}),\" va eng yuqorida e\\u2019lon qilingan \",(0,n.jsx)(i.strong,{children:\"root routega\"}),\" qolgan routelarni qo\\u2019shib chiqasiz.\"]}),`\n`,(0,n.jsx)(i.li,{children:\"Eng muhim qismi esa mana shu:\"}),`\n`]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`\ndeclare module \"@tanstack/router\" {\ninterface Register {\n  router: typeof router;\n  }\n}\n\n// bu kod yozilmasa, Tanstack Routerni foydasi umuman bilinmaydi\n// bu kod bizning routerni Typecript compiler tushunishi, ilovamizdagi sahifalarni tanib olishiga xizmat qiladi\n`})}),`\n`,(0,n.jsxs)(i.ul,{children:[`\n`,(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:\"App\"}),\" componentimizni \",(0,n.jsx)(i.strong,{children:\"RouterProvider\"}),\" bilan o\\u2019raymiz\"]}),`\n`]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`\nimport { RouterProvider } from \"@tanstack/router\"\nimport router from \"./router\"\n\nexport default function App() {\n  return (\n    <RouterProvider router={router} />\n  )\n}\n`})}),`\n`,(0,n.jsxs)(i.ul,{children:[`\n`,(0,n.jsxs)(i.li,{children:[\"Navbar component yaratish va \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" ning \",(0,n.jsx)(i.strong,{children:\"Link\"}),` componentini ishlatish.\n`,(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" o'zining \",(0,n.jsx)(i.strong,{children:\"built-in Link componentini\"}),\" bilan keladi. Bu componentni siz ilovaning qaysi qismida \",(0,n.jsx)(i.strong,{children:\"linklar\"}),\" kerak bo'lsa ishlatishingiz mumkin va aynan shu component orqali siz \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" ning haqiqiy foydalaridan birini ko'rasiz\"]}),`\n`]}),`\n`,(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:`import { Link } from \"@tanstack/router\";\nexport function Navbar() {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/posts\">Posts</Link>\n        </li>\n        <li>\n          <Link to=\"/users\">Users</Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n`})}),`\n`,(0,n.jsx)(i.p,{children:\"Ko\\u2019rib turganingizdek, biz ilovamizdagi barcha route larni Typescript orqali yozishga erishdik. Bu hali ozginagina kirish edi. Tanstack Router juda ko\\u2019p ishlarni bajaradi:\"}),`\n`,(0,n.jsxs)(\"ul\",{children:[(0,n.jsx)(\"li\",{children:\" Devtools \\u2705\"}),(0,n.jsx)(\"li\",{children:\" Type safe search params \\u2705\"})]}),`\n`,(0,n.jsxs)(i.h2,{id:\"xayr-react-router-dom\",children:[(0,n.jsx)(i.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#xayr-react-router-dom\",children:(0,n.jsx)(i.span,{className:\"icon icon-link\"})}),\"Xayr, React Router DOM?\"]}),`\n`,(0,n.jsxs)(i.p,{children:[\"Men \",(0,n.jsx)(i.a,{href:\"https://tanstack.com/router/v1\",children:(0,n.jsx)(i.strong,{children:\"Tanstack Router\"})}),\" stabil versiyada chiqishini intizorlik bilan kutilmoqda va stabil versiyasi chiqishi bilan \",(0,n.jsx)(i.strong,{children:\"React Router DOM\"}),\"ni ortda qoldirishi kutilmoqda. \",(0,n.jsx)(i.strong,{children:\"React Router DOM\"}),\" yaxshiroq raqobat taklif qilishini kutib qolamiz\"]})]})}function R(r={}){let{wrapper:i}=r.components||{};return i?(0,n.jsx)(i,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var v=R;return z(f);})();\n;return Component;"
        },
        "_id": "blog/tanstack-router.mdx",
        "_raw": {
          "sourceFilePath": "blog/tanstack-router.mdx",
          "sourceFileName": "tanstack-router.mdx",
          "sourceFileDir": "blog",
          "contentType": "mdx",
          "flattenedPath": "blog/tanstack-router"
        },
        "type": "Doc",
        "slug": "/blog/tanstack-router",
        "slugAsParams": "tanstack-router"
      },
      "documentHash": "1706002007528",
      "hasWarnings": false,
      "documentTypeName": "Doc"
    }
  }
}
